{
    "pipes": [
        {
            "name": "ClassificationPipe",
            "id": "pipe-ClassificationPipe-8174deca06a895d78c6bf441a3d4ef025b86f2bf9ea09f75fb75be05c55086f891ecef47e901b92492f2d89a2245f672c2a96eb23756069e1141a0a720687194",
            "file": "src/app/shared/pipes/classification.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "classification",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classification",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "classification",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\r\n\r\n@Pipe({\r\n\tname: 'classification',\r\n\tstandalone: true\r\n})\r\nexport class ClassificationPipe implements PipeTransform {\r\n\ttransform(classification: string): string {\r\n\t\treturn ` | ${classification}`\r\n\t}\r\n}\r\n"
        },
        {
            "name": "GenrePipe",
            "id": "pipe-GenrePipe-b0c8b01f81f988594941dd74ecc21ea48ebe8b2b00da664e7f8bc216d9645bdbdc08d22d6284ed7b2e836518ddfc1d8ccb2f336300933e2cce5b56b16247624d",
            "file": "src/app/shared/pipes/genre.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "genre",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\r\n\r\n@Pipe({\r\n\tname: 'genre',\r\n\tstandalone: true\r\n})\r\nexport class GenrePipe implements PipeTransform {\r\n\ttransform(genre: string[]): string {\r\n\t\treturn genre.join(' / ')\r\n\t}\r\n}\r\n"
        },
        {
            "name": "RuntimePipe",
            "id": "pipe-RuntimePipe-9e423f94c47afbc7cbbc0c2e20f6b76b1aa3a35ae3c6ae0f07419ffa578acbbb7542a17c2a6fa4f22b540b4975a28b0383dfd5f1801dd1969fd53ceefea2b12c",
            "file": "src/app/shared/pipes/runtime.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "runtime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "runtime",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "runtime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\r\nimport { formatDate } from '@angular/common'\r\n\r\n@Pipe({\r\n\tname: 'runtime',\r\n\tstandalone: true\r\n})\r\nexport class RuntimePipe implements PipeTransform {\r\n\ttransform(runtime: number): string {\r\n\t\treturn runtime > 0 ? formatDate(runtime * 1000 * 60, \"h 'hr' m 'min'\", 'en-us', 'z') || '' : 'N/A'\r\n\t}\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "BelongsToCollection",
            "id": "interface-BelongsToCollection-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CarouselItem",
            "id": "interface-CarouselItem-3f535764729b944a135d10e65c62201657cb40c4954b6a7e515e59586d05a26f9715f5e357bd6ee2cd24c8992c90f4aa7f91f1d06a5ef95cdfae0a0e6381df7e",
            "file": "src/app/core/models/carousel-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CarouselItem {\r\n\treadonly id: string\r\n\timage: string\r\n\talt: string\r\n\thint?: string\r\n\tmovie: { title: string; poster: string; genre: string[] }\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CertificationSchema",
            "id": "interface-CertificationSchema-caf251c3312052ff08581a35d1a757d12194d1b752282285efdc58d72e5c700bd4e05c3169f0341cb47fa816164d8989aff2c03f183c381047683fdfb3487adf",
            "file": "src/app/core/schemas/certification.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CertificationSchema {\r\n\tcertification: string\r\n\tmeaning: string\r\n\torder: number\r\n}\r\n",
            "properties": [
                {
                    "name": "certification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "meaning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Classification",
            "id": "interface-Classification-513de5bf42e2d4f0ef9205382a28ba78dc7f10a529951b8bafd0490c02bf49e354f3965038b8736bc5151a8fbcc082bc69888196dbb38dc6f26d45af609aad7a",
            "file": "src/app/core/models/movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Movie {\r\n\treadonly id: number\r\n\ttitle: string\r\n\tposter: string\r\n\tbackdrop: string\r\n\tgenre: string[]\r\n\truntime: number\r\n\tclassification: Classification\r\n\tbanner: string\r\n\tlogo: string\r\n}\r\n\r\nexport interface Classification {\r\n\treadonly id: string\r\n\tclassification: string\r\n\tmeaning: string\r\n}\r\n",
            "properties": [
                {
                    "name": "classification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "meaning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfigurationSchema",
            "id": "interface-ConfigurationSchema-9e8d420bde94a8d51cb7904f78d25da539f248860ed72363b2692d717acef5786b8552ca843052da40d979e9062fd827b54654259b2729210aa66079e6a2caae",
            "file": "src/app/core/schemas/configuration.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfigurationSchema {\r\n\timages: Images\r\n\tchange_keys: string[]\r\n}\r\n\r\ninterface Images {\r\n\tbase_url: string\r\n\tsecure_base_url: string\r\n\tbackdrop_sizes: string[]\r\n\tlogo_sizes: string[]\r\n\tposter_sizes: string[]\r\n\tprofile_sizes: string[]\r\n\tstill_sizes: string[]\r\n}\r\n",
            "properties": [
                {
                    "name": "change_keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Images",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FormField",
            "id": "interface-FormField-f677a6732c21ed576233ee711d4f0cac3e0a807d6f4aedc26a70aa224cf0f79ec364c6194fdf8554214aa4e3fae89525f665d51f688510a9d819cdb73e92fa61",
            "file": "src/app/core/models/form-field.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormField {\r\n\treadonly id: string\r\n\tformControlName: string\r\n\ttype: 'text' | 'email' | 'password' | 'number'\r\n\tlabel: string\r\n\tplaceholder: string\r\n\ticon: string\r\n\tisRequired: boolean\r\n\thint?: string\r\n\tprefix?: string\r\n\tpostfix?: string\r\n}\r\n",
            "properties": [
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isRequired",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "postfix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "prefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"text\" | \"email\" | \"password\" | \"number\"",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Genre",
            "id": "interface-Genre-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ImageItem",
            "id": "interface-ImageItem-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "aspect_ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "file_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "iso_639_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Images",
            "id": "interface-Images-9e8d420bde94a8d51cb7904f78d25da539f248860ed72363b2692d717acef5786b8552ca843052da40d979e9062fd827b54654259b2729210aa66079e6a2caae",
            "file": "src/app/core/schemas/configuration.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfigurationSchema {\r\n\timages: Images\r\n\tchange_keys: string[]\r\n}\r\n\r\ninterface Images {\r\n\tbase_url: string\r\n\tsecure_base_url: string\r\n\tbackdrop_sizes: string[]\r\n\tlogo_sizes: string[]\r\n\tposter_sizes: string[]\r\n\tprofile_sizes: string[]\r\n\tstill_sizes: string[]\r\n}\r\n",
            "properties": [
                {
                    "name": "backdrop_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "base_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "logo_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "poster_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "profile_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "secure_base_url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "still_sizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Images",
            "id": "interface-Images-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac-1",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "backdrops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageItem[]",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "logos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageItem[]",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "posters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageItem[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Images-1"
        },
        {
            "name": "LoaderParams",
            "id": "interface-LoaderParams-c85858904b7d1c13f661b66b044ae45229d0a662995353ac159255d964201aa69a3484e753dcd628ccd229b257c30a67ea5b808e99a09dc4cf13bdb998a58b60",
            "file": "src/app/core/models/loader-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoaderParams {\r\n\twidth?: number\r\n\theight?: number\r\n\tquality?: number\r\n\tformat?: string\r\n\tfit?: string\r\n\tposition?: string\r\n}\r\n",
            "properties": [
                {
                    "name": "fit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "quality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Movie",
            "id": "interface-Movie-513de5bf42e2d4f0ef9205382a28ba78dc7f10a529951b8bafd0490c02bf49e354f3965038b8736bc5151a8fbcc082bc69888196dbb38dc6f26d45af609aad7a",
            "file": "src/app/core/models/movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Movie {\r\n\treadonly id: number\r\n\ttitle: string\r\n\tposter: string\r\n\tbackdrop: string\r\n\tgenre: string[]\r\n\truntime: number\r\n\tclassification: Classification\r\n\tbanner: string\r\n\tlogo: string\r\n}\r\n\r\nexport interface Classification {\r\n\treadonly id: string\r\n\tclassification: string\r\n\tmeaning: string\r\n}\r\n",
            "properties": [
                {
                    "name": "backdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "banner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "classification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Classification",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "genre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MovieSchema",
            "id": "interface-MovieSchema-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "belongs_to_collection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BelongsToCollection",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Genre[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "homepage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Images",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "imdb_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "origin_country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "production_companies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductionCompany[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "production_countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductionCountry[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "release_dates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReleaseDates",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "spoken_languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpokenLanguage[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-45a847f928cf8b47b2ecf5a839a93a74ed452da70989cb53bb68630822a56e8d3556a0733e5b62eeffacb6826696d1d859af131ff7276b408c8cff215cd6123c",
            "file": "src/app/core/models/navigation-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NavigationItem {\r\n\treadonly id: string\r\n\tlabel: string\r\n\ticon: string\r\n\troute: string\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductionCompany",
            "id": "interface-ProductionCompany-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "logo_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "origin_country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductionCountry",
            "id": "interface-ProductionCountry-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "iso_3166_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ReleaseDate",
            "id": "interface-ReleaseDate-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "certification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "descriptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "iso_639_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "note",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ReleaseDates",
            "id": "interface-ReleaseDates-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Result[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Result",
            "id": "interface-Result-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "iso_3166_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "release_dates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReleaseDate[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SocialMedia",
            "id": "interface-SocialMedia-cb45ba10b03c67c3b7abc610710b13394366503fef9e265ff15a757732dc2f73f46231795322b114c589d973c554452abdb6dec3f18ddc948caa2b6a24fa49ef",
            "file": "src/app/core/models/social-media.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SocialMedia {\r\n\treadonly id: string\r\n\ticon: string\r\n\tlink: string\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SpokenLanguage",
            "id": "interface-SpokenLanguage-cf1413684b414dc304ae505a5f68cd05a00abe5928743522ea1078eba5ec265d6fd237de693e79612f96506a2069d7516100a98d9b46c83b10d988de789e08ac",
            "file": "src/app/core/schemas/movie-schema.schema.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MovieSchema {\r\n\treadonly id: number\r\n\tadult: boolean\r\n\tbackdrop_path: string\r\n\tbelongs_to_collection: BelongsToCollection\r\n\tbudget: number\r\n\tgenres: Genre[]\r\n\thomepage: string\r\n\timdb_id: string\r\n\torigin_country: string[]\r\n\toriginal_language: string\r\n\toriginal_title: string\r\n\toverview: string\r\n\tpopularity: number\r\n\tposter_path: string\r\n\tproduction_companies: ProductionCompany[]\r\n\tproduction_countries: ProductionCountry[]\r\n\trelease_date: Date\r\n\trevenue: number\r\n\truntime: number\r\n\tspoken_languages: SpokenLanguage[]\r\n\tstatus: string\r\n\ttagline: string\r\n\ttitle: string\r\n\tvideo: boolean\r\n\tvote_average: number\r\n\tvote_count: number\r\n\trelease_dates: ReleaseDates\r\n\timages: Images\r\n}\r\n\r\ninterface BelongsToCollection {\r\n\tid: number\r\n\tname: string\r\n\tposter_path: string\r\n\tbackdrop_path: string\r\n}\r\n\r\ninterface Genre {\r\n\treadonly id: number\r\n\tname: string\r\n}\r\n\r\ninterface ProductionCompany {\r\n\tid: number\r\n\tlogo_path: string\r\n\tname: string\r\n\torigin_country: string\r\n}\r\n\r\ninterface ProductionCountry {\r\n\tiso_3166_1: string\r\n\tname: string\r\n}\r\n\r\ninterface ReleaseDates {\r\n\tresults: Result[]\r\n}\r\n\r\ninterface Result {\r\n\tiso_3166_1: string\r\n\trelease_dates: ReleaseDate[]\r\n}\r\n\r\ninterface ReleaseDate {\r\n\tcertification: string\r\n\tdescriptors: string[]\r\n\tiso_639_1: string\r\n\tnote: string\r\n\trelease_date: Date\r\n\ttype: number\r\n}\r\n\r\ninterface SpokenLanguage {\r\n\tenglish_name: string\r\n\tiso_639_1: string\r\n\tname: string\r\n}\r\n\r\ninterface Images {\r\n\tbackdrops: ImageItem[]\r\n\tlogos: ImageItem[]\r\n\tposters: ImageItem[]\r\n}\r\n\r\ninterface ImageItem {\r\n\taspect_ratio: number\r\n\theight: number\r\n\tiso_639_1: null | string\r\n\tfile_path: string\r\n\tvote_average: number\r\n\tvote_count: number\r\n\twidth: number\r\n}\r\n",
            "properties": [
                {
                    "name": "english_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "iso_639_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-43e7466eb1341567a574d14f9c0f28378e6c909e8e3a038d0081e35f526c6dd572b7fc012dc9d7b2d753acdc20e3ced9242cb5bccc24a1c28eada09264ffee41",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n\treadonly id: string\r\n\tname: string\r\n\temail: string\r\n\tbalance: number\r\n\tticket: number\r\n}\r\n",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ticket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ApiConfigurationService",
            "id": "injectable-ApiConfigurationService-f07398f787d1af21f3f76e3be4da0a0c673c37505ef2f10f30f72261bc139f6b772cede54ac866a2f9d3db9a1fee47401869a876f98455a62f5712318785f812",
            "file": "src/app/core/services/api-configuration/api-configuration.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "backdropSizes$",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagesPath$",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "posterSizes$",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getApiDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFetches the API configuration details.\n",
                    "description": "<p>Fetches the API configuration details.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 649,
                                "end": 656,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits a boolean value.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getBackdropSizes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the list of backdrop sizes.\n",
                    "description": "<p>Returns the list of backdrop sizes.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1555,
                                "end": 1562,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits an array of strings.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getImagesPath",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the base URL for images.\n",
                    "description": "<p>Returns the base URL for images.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1154,
                                "end": 1161,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits a string value.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getPosterSizes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the list of poster sizes.\n",
                    "description": "<p>Returns the list of poster sizes.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1349,
                                "end": 1356,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits an array of strings.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "isApiConfigurationLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermines if the API configuration has been loaded.\n",
                    "description": "<p>Determines if the API configuration has been loaded.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1782,
                                "end": 1789,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Returns <code>true</code> if the API configuration has been loaded, <code>false</code> otherwise.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { environment } from 'environments/environment'\r\nimport { BehaviorSubject, map, tap } from 'rxjs'\r\nimport { ConfigurationSchema } from '@schemas'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class ApiConfigurationService {\r\n\tprivate apiUrl = environment.apiUrl\r\n\r\n\tprivate imagesPath$ = new BehaviorSubject<string>('')\r\n\tprivate posterSizes$ = new BehaviorSubject<string[]>([])\r\n\tprivate backdropSizes$ = new BehaviorSubject<string[]>([])\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t/**\r\n\t * Fetches the API configuration details.\r\n\t * @returns {Observable<boolean>} An Observable that emits a boolean value.\r\n\t */\r\n\tgetApiDetails() {\r\n\t\treturn this.http.get<ConfigurationSchema>(`${this.apiUrl}/configuration`).pipe(\r\n\t\t\tmap(result => result.images),\r\n\t\t\ttap(configuration => {\r\n\t\t\t\tthis.imagesPath$.next(configuration.secure_base_url)\r\n\t\t\t\tthis.posterSizes$.next(configuration.poster_sizes)\r\n\t\t\t\tthis.backdropSizes$.next(configuration.backdrop_sizes)\r\n\t\t\t}),\r\n\t\t\tmap(() => true)\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the base URL for images.\r\n\t * @returns {Observable<string>} An Observable that emits a string value.\r\n\t */\r\n\tgetImagesPath() {\r\n\t\treturn this.imagesPath$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of poster sizes.\r\n\t * @returns {Observable<string[]>} An Observable that emits an array of strings.\r\n\t */\r\n\tgetPosterSizes() {\r\n\t\treturn this.posterSizes$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of backdrop sizes.\r\n\t * @returns {Observable<string[]>} An Observable that emits an array of strings.\r\n\t */\r\n\tgetBackdropSizes() {\r\n\t\treturn this.backdropSizes$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the API configuration has been loaded.\r\n\t * @returns {boolean} Returns `true` if the API configuration has been loaded, `false` otherwise.\r\n\t */\r\n\tisApiConfigurationLoaded() {\r\n\t\treturn this.imagesPath$.value !== '' && this.posterSizes$.value.length > 0 && this.backdropSizes$.value.length > 0\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-f0b544efa27600bad9e8e2d4156e3249068003e5f0bb4df1cbbf703ecd8735d4f945b0b55efb20a6e05926c00f2347452caa0844f5e4522a4946188f45129ebb",
            "file": "src/app/core/services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "userService",
                    "defaultValue": "inject(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the user is authenticated.\n\nThis function checks if there is a 'user' item in the session storage.\nIf the 'user' item exists, it means the user is authenticated.\n\n",
                    "description": "<p>Checks if the user is authenticated.</p>\n<p>This function checks if there is a &#39;user&#39; item in the session storage.\nIf the &#39;user&#39; item exists, it means the user is authenticated.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1188,
                                "end": 1195,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits <code>true</code> if the user is authenticated, <code>false</code> otherwise.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSigns out the user by removing the user session from the session storage.\n",
                    "description": "<p>Signs out the user by removing the user session from the session storage.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 783,
                                "end": 790,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that completes after removing the user session.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSigns up a new user.\n\n",
                    "description": "<p>Signs up a new user.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 354,
                                "end": 358,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 348,
                                "end": 353,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The user object containing the user details.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 412,
                                "end": 419,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits the result of the sign up operation.</p>\n",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core'\r\nimport { of } from 'rxjs'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { User } from '@models'\r\nimport { UserService } from '../user/user.service'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\tuserService = inject(UserService)\r\n\r\n\t/**\r\n\t * Signs up a new user.\r\n\t *\r\n\t * @param user - The user object containing the user details.\r\n\t * @returns {Observable<void>} An Observable that emits the result of the sign up operation.\r\n\t */\r\n\tsignUp(user: User) {\r\n\t\tconst newUser: User = { ...user, id: uuid() }\r\n\t\tsessionStorage.setItem('user', JSON.stringify(newUser))\r\n\t\treturn of(this.userService.setUser(newUser))\r\n\t}\r\n\r\n\t/**\r\n\t * Signs out the user by removing the user session from the session storage.\r\n\t * @returns {Observable<void>} An Observable that completes after removing the user session.\r\n\t */\r\n\tsignOut() {\r\n\t\tsessionStorage.removeItem('user')\r\n\t\treturn of(this.userService.setUser(null))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the user is authenticated.\r\n\t *\r\n\t * This function checks if there is a 'user' item in the session storage.\r\n\t * If the 'user' item exists, it means the user is authenticated.\r\n\t *\r\n\t * @returns {Observable<boolean>} An Observable that emits `true` if the user is authenticated, `false` otherwise.\r\n\t */\r\n\tisAuthenticated() {\r\n\t\treturn of(sessionStorage.getItem('user') !== null)\r\n\t}\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CertificationsService",
            "id": "injectable-CertificationsService-e2b2f802445fcf56ec509bbfdc11648f1a3cb8c45b2557d271809706c2cc952563a69f21f7b2e75f6ac3aad127cb05a7334c0ff0c03f67447271a8219bc98fe6",
            "file": "src/app/core/services/certifications/certifications.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "movieCertifications$",
                    "defaultValue": "new BehaviorSubject<Classification[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "areMovieCertificationsLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the movie certifications have been loaded.\n",
                    "description": "<p>Checks if the movie certifications have been loaded.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1536,
                                "end": 1543,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A boolean indicating if the movie certifications have been loaded.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieCertifications",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the movie certifications as an observable.\n",
                    "description": "<p>Retrieves the movie certifications as an observable.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1315,
                                "end": 1322,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that emits the movie certifications.</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadMovieCertifications",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the movie certifications from the API and stores them in a subject.\n",
                    "description": "<p>Retrieves the movie certifications from the API and stores them in a subject.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { environment } from 'environments/environment'\r\nimport { BehaviorSubject, map, tap } from 'rxjs'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Classification } from '@models'\r\nimport { CertificationSchema } from '@schemas'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class CertificationsService {\r\n\tprivate apiUrl = environment.apiUrl\r\n\tprivate movieCertifications$ = new BehaviorSubject<Classification[]>([])\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t/**\r\n\t * Retrieves the movie certifications from the API and stores them in a subject.\r\n\t */\r\n\tloadMovieCertifications() {\r\n\t\treturn this.http\r\n\t\t\t.get<{ certifications: { US: CertificationSchema[] } }>(`${this.apiUrl}/certification/movie/list`)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(({ certifications }) => {\r\n\t\t\t\t\tconst classifications: Classification[] = certifications.US.map(certification => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\t\t\tclassification: certification.certification,\r\n\t\t\t\t\t\t\tmeaning: certification.meaning\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\treturn classifications\r\n\t\t\t\t}),\r\n\t\t\t\ttap(classifications => this.movieCertifications$.next(classifications)),\r\n\t\t\t\tmap(() => true)\r\n\t\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the movie certifications as an observable.\r\n\t * @returns An observable that emits the movie certifications.\r\n\t */\r\n\tgetMovieCertifications() {\r\n\t\treturn this.movieCertifications$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the movie certifications have been loaded.\r\n\t * @returns A boolean indicating if the movie certifications have been loaded.\r\n\t */\r\n\tareMovieCertificationsLoaded() {\r\n\t\treturn this.movieCertifications$.value.length > 0\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CoreService",
            "id": "injectable-CoreService-98d5b836ed6647d17771a68bff8099d3e6e7b39b385a588bde9335d5485b32144f11e0c510beb89bb0632cf4cab80c20d72f4a6ac21f30d71675ba9fa282fe0f",
            "file": "src/app/core/services/core/core.service.ts",
            "properties": [
                {
                    "name": "isButtonDisabled$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isButtonLoading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFormFieldDisabled$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNavigationItemLoading$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getIsButtonDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable that emits the current state of the button disabled flag.\n",
                    "description": "<p>Returns an observable that emits the current state of the button disabled flag.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1532,
                                "end": 1539,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that emits the current state of the button disabled flag.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getIsButtonLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable that emits the current state of the button loading flag.\n",
                    "description": "<p>Returns an observable that emits the current state of the button loading flag.</p>\n"
                },
                {
                    "name": "getIsFormFieldDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable that emits the current state of the form field disabled flag.\n",
                    "description": "<p>Returns an observable that emits the current state of the form field disabled flag.</p>\n"
                },
                {
                    "name": "getIsNavigationItemLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable that emits the current state of the navigation item loading.\n",
                    "description": "<p>Returns an observable that emits the current state of the navigation item loading.</p>\n"
                },
                {
                    "name": "getNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the navigation data.\n",
                    "description": "<p>Retrieves the navigation data.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 754,
                                "end": 761,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An observable that emits the navigation data.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getSocialMedia",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the social media data.\n",
                    "description": "<p>Retrieves the social media data.</p>\n"
                },
                {
                    "name": "setIsButtonDisabled",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the disabled state of a button.\n",
                    "description": "<p>Sets the disabled state of a button.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1780,
                                "end": 1790,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1774,
                                "end": 1779,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>A boolean value indicating whether the button is disabled or not.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "setIsButtonLoading",
                    "args": [
                        {
                            "name": "isLoading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the loading state of a button.\n",
                    "description": "<p>Sets the loading state of a button.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1262,
                                "end": 1271,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isLoading"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1256,
                                "end": 1261,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>A boolean value indicating whether the button is loading or not.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "setIsFormFieldDisabled",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the disabled state of a form field.\n",
                    "description": "<p>Sets the disabled state of a form field.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2352,
                                "end": 2362,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2346,
                                "end": 2351,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>A boolean value indicating whether the form field is disabled or not.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "setIsNavigationItemLoading",
                    "args": [
                        {
                            "name": "isLoading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the loading state of a navigation item.\n",
                    "description": "<p>Sets the loading state of a navigation item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2949,
                                "end": 2958,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "isLoading"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2943,
                                "end": 2948,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>A boolean value indicating whether the navigation item is loading or not.</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { BehaviorSubject, of } from 'rxjs'\r\nimport { NAVIGATION, SOCIAL_MEDIA } from '@data'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class CoreService {\r\n\tprivate isButtonLoading$ = new BehaviorSubject<boolean>(false)\r\n\tprivate isButtonDisabled$ = new BehaviorSubject<boolean>(false)\r\n\tprivate isFormFieldDisabled$ = new BehaviorSubject<boolean>(false)\r\n\tprivate isNavigationItemLoading$ = new BehaviorSubject<boolean>(false)\r\n\r\n\t/**\r\n\t * Navigation\r\n\t */\r\n\r\n\t/**\r\n\t * Retrieves the social media data.\r\n\t * @returns {Observable<SocialMedia[]>} An observable that emits the social media data.\r\n\t */\r\n\tgetSocialMedia() {\r\n\t\treturn of(SOCIAL_MEDIA)\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the navigation data.\r\n\t * @returns {Observable<NavigationItem[]>} An observable that emits the navigation data.\r\n\t */\r\n\tgetNavigation() {\r\n\t\treturn of(NAVIGATION)\r\n\t}\r\n\r\n\t/**\r\n\t * Button\r\n\t */\r\n\r\n\t/**\r\n\t * Returns an observable that emits the current state of the button loading flag.\r\n\t * @returns {Observable<boolean>} An observable that emits the current state of the button loading flag.\r\n\t */\r\n\tgetIsButtonLoading() {\r\n\t\treturn this.isButtonLoading$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the loading state of a button.\r\n\t * @param isLoading - A boolean value indicating whether the button is loading or not.\r\n\t */\r\n\tsetIsButtonLoading(isLoading: boolean) {\r\n\t\tthis.isButtonLoading$.next(isLoading)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an observable that emits the current state of the button disabled flag.\r\n\t * @returns {Observable<boolean>} An observable that emits the current state of the button disabled flag.\r\n\t */\r\n\tgetIsButtonDisabled() {\r\n\t\treturn this.isButtonDisabled$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the disabled state of a button.\r\n\t * @param isDisabled - A boolean value indicating whether the button is disabled or not.\r\n\t */\r\n\tsetIsButtonDisabled(isDisabled: boolean) {\r\n\t\tthis.isButtonDisabled$.next(isDisabled)\r\n\t}\r\n\r\n\t/**\r\n\t * Form field\r\n\t */\r\n\r\n\t/**\r\n\t * Returns an observable that emits the current state of the form field disabled flag.\r\n\t * @returns {Observable<boolean>} An observable that emits the current state of the form field disabled flag.\r\n\t */\r\n\tgetIsFormFieldDisabled() {\r\n\t\treturn this.isFormFieldDisabled$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the disabled state of a form field.\r\n\t * @param isDisabled - A boolean value indicating whether the form field is disabled or not.\r\n\t */\r\n\tsetIsFormFieldDisabled(isDisabled: boolean) {\r\n\t\tthis.isFormFieldDisabled$.next(isDisabled)\r\n\t}\r\n\r\n\t/**\r\n\t * Navigation item\r\n\t */\r\n\r\n\t/**\r\n\t * Returns an observable that emits the current state of the navigation item loading.\r\n\t * @returns {Observable<boolean>} An observable that emits the current state of the navigation item loading.\r\n\t */\r\n\tgetIsNavigationItemLoading() {\r\n\t\treturn this.isNavigationItemLoading$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the loading state of a navigation item.\r\n\t * @param isLoading - A boolean value indicating whether the navigation item is loading or not.\r\n\t */\r\n\tsetIsNavigationItemLoading(isLoading: boolean) {\r\n\t\tthis.isNavigationItemLoading$.next(isLoading)\r\n\t}\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MovieService",
            "id": "injectable-MovieService-8b3fe0e5d52625c1ff21dbe58dee670616546a943837bbacf024a5ce333f71bb64dd656f54df2e2f918355b8cef0d104ade0c413a7945299be0834a5cfc7606d",
            "file": "src/app/core/services/movie/movie.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "movies$",
                    "defaultValue": "new BehaviorSubject<Movie[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "areMoviesLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the movies are already loaded.\n",
                    "description": "<p>Checks if the movies are already loaded.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3929,
                                "end": 3936,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A boolean value indicating whether the movies are loaded.</p>\n",
                            "returnType": "boolean"
                        }
                    ]
                },
                {
                    "name": "getMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the list of movies currently playing in theaters.\n",
                    "description": "<p>Returns the list of movies currently playing in theaters.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3331,
                                "end": 3338,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits an array of <code>Movie</code> objects.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "getMoviesCarousel",
                    "args": [
                        {
                            "name": "isSignUp",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates a carousel of movies for display.\n\nThe function randomly sorts the movies and selects the first five for the carousel.\n",
                    "description": "<p>Generates a carousel of movies for display.</p>\n<p>The function randomly sorts the movies and selects the first five for the carousel.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "isSignUp",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoviesForHome",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a list of movies for display on the home page.\n\nThe function randomly sorts the movies and selects the first five for display.\n",
                    "description": "<p>Returns a list of movies for display on the home page.</p>\n<p>The function randomly sorts the movies and selects the first five for display.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 3553,
                                "end": 3560,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits an array of <code>Movie</code> objects.</p>\n<p>The function randomly sorts the movies and selects the first five for display.</p>\n",
                            "returnType": ""
                        }
                    ]
                },
                {
                    "name": "loadMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Movie[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the list of movies from the API.\n",
                    "description": "<p>Loads the list of movies from the API.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { environment } from 'environments/environment'\r\nimport { BehaviorSubject, catchError, concatMap, delay, EMPTY, forkJoin, map, Observable, of, tap } from 'rxjs'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { MovieSchema } from '@schemas'\r\nimport { CarouselItem, Classification, Movie } from '@models'\r\nimport { CertificationsService } from '@services'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class MovieService {\r\n\tprivate apiUrl = environment.apiUrl\r\n\tprivate movies$ = new BehaviorSubject<Movie[]>([])\r\n\r\n\tconstructor(\r\n\t\tprivate http: HttpClient,\r\n\t\tprivate certificationsService: CertificationsService\r\n\t) {}\r\n\r\n\t/**\r\n\t * Movies\r\n\t */\r\n\r\n\t/**\r\n\t * Loads the list of movies from the API.\r\n\t * @returns An Observable that emits an array of Movie objects.\r\n\t */\r\n\tloadMovies(): Observable<Movie[]> {\r\n\t\treturn this.http.get<{ results: MovieSchema[] }>(`${this.apiUrl}/movie/now_playing`).pipe(\r\n\t\t\tmap(({ results }) => {\r\n\t\t\t\tconst movies: Movie[] = results.map(movie => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tid: movie.id,\r\n\t\t\t\t\t\ttitle: movie.title,\r\n\t\t\t\t\t\tposter: movie.poster_path,\r\n\t\t\t\t\t\tbackdrop: movie.backdrop_path,\r\n\t\t\t\t\t\tclassification: {} as Classification,\r\n\t\t\t\t\t\tgenre: [],\r\n\t\t\t\t\t\truntime: 0,\r\n\t\t\t\t\t\tbanner: '',\r\n\t\t\t\t\t\tlogo: ''\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn movies\r\n\t\t\t}),\r\n\t\t\tconcatMap(movies => {\r\n\t\t\t\tconst moviesDetails = movies.map(movie => {\r\n\t\t\t\t\treturn this.http.get<MovieSchema>(`${this.apiUrl}/movie/${movie.id}?append_to_response=release_dates,images`).pipe(\r\n\t\t\t\t\t\tdelay(200),\r\n\t\t\t\t\t\tmap(m => {\r\n\t\t\t\t\t\t\tconst releaseDates = m.release_dates.results\r\n\t\t\t\t\t\t\tconst releaseDate = releaseDates.find(date => date.iso_3166_1 === 'US')\r\n\r\n\t\t\t\t\t\t\tconst certification = releaseDate?.release_dates.find(date => {\r\n\t\t\t\t\t\t\t\treturn date.certification && (date.type === 3 || date.type === 1)\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t...movie,\r\n\t\t\t\t\t\t\t\tgenre: m.genres.flatMap(genre => genre.name),\r\n\t\t\t\t\t\t\t\truntime: m.runtime,\r\n\t\t\t\t\t\t\t\tclassification: {\r\n\t\t\t\t\t\t\t\t\tid: uuid(),\r\n\t\t\t\t\t\t\t\t\tclassification: certification?.certification || 'NR',\r\n\t\t\t\t\t\t\t\t\tmeaning: 'Not Rated'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tbanner:\r\n\t\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t\tm.images.backdrops.find(image => image.iso_639_1 === 'en') ||\r\n\t\t\t\t\t\t\t\t\t\tm.images.backdrops.find(image => !image.iso_639_1)\r\n\t\t\t\t\t\t\t\t\t)?.file_path || '',\r\n\t\t\t\t\t\t\t\tlogo:\r\n\t\t\t\t\t\t\t\t\t(m.images.logos.find(image => image.iso_639_1 === 'en') || m.images.logos.find(image => !image.iso_639_1))\r\n\t\t\t\t\t\t\t\t\t\t?.file_path || ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t\treturn forkJoin(moviesDetails)\r\n\t\t\t}),\r\n\t\t\tconcatMap(movies => {\r\n\t\t\t\treturn this.certificationsService.getMovieCertifications().pipe(\r\n\t\t\t\t\tmap(certifications => {\r\n\t\t\t\t\t\treturn movies.map(movie => {\r\n\t\t\t\t\t\t\tconst classification = certifications.find(\r\n\t\t\t\t\t\t\t\tcertification => certification.classification === movie.classification.classification\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t...movie,\r\n\t\t\t\t\t\t\t\tclassification: {\r\n\t\t\t\t\t\t\t\t\t...movie.classification,\r\n\t\t\t\t\t\t\t\t\tmeaning: classification?.meaning || 'Not Rated'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t}),\r\n\t\t\ttap(movies => this.movies$.next(movies)),\r\n\t\t\tcatchError(() => {\r\n\t\t\t\treturn EMPTY\r\n\t\t\t})\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the list of movies currently playing in theaters.\r\n\t * @returns {Observable<Movie[]>} An Observable that emits an array of `Movie` objects.\r\n\t */\r\n\tgetMovies() {\r\n\t\treturn this.movies$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of movies for display on the home page.\r\n\t * @returns {Observable<Movie[]>} An Observable that emits an array of `Movie` objects.\r\n\t *\r\n\t * The function randomly sorts the movies and selects the first five for display.\r\n\t */\r\n\tgetMoviesForHome() {\r\n\t\treturn this.movies$.asObservable().pipe(map(movies => movies.sort(() => Math.random() - 0.5).slice(0, 5)))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the movies are already loaded.\r\n\t * @returns {boolean} A boolean value indicating whether the movies are loaded.\r\n\t */\r\n\tareMoviesLoaded() {\r\n\t\treturn this.movies$.value.length > 0\r\n\t}\r\n\r\n\t/**\r\n\t * Carousel\r\n\t */\r\n\r\n\t/**\r\n\t * Generates a carousel of movies for display.\r\n\t * @returns {Observable<CarouselItem[]>} An Observable that emits an array of `CarouselItem` objects.\r\n\t *\r\n\t * The function randomly sorts the movies and selects the first five for the carousel.\r\n\t */\r\n\tgetMoviesCarousel(isSignUp: boolean = false) {\r\n\t\tconst movies = this.movies$.value\r\n\t\tconst posters: CarouselItem[] = movies.flatMap(movie => {\r\n\t\t\treturn {\r\n\t\t\t\tid: uuid(),\r\n\t\t\t\timage: isSignUp ? movie.backdrop : movie.banner,\r\n\t\t\t\talt: movie.title,\r\n\t\t\t\thint: `🎬 Movie: ${movie.title}`,\r\n\t\t\t\tmovie: {\r\n\t\t\t\t\ttitle: movie.title,\r\n\t\t\t\t\tposter: movie.poster,\r\n\t\t\t\t\tgenre: movie.genre\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn of(posters.sort(() => Math.random() - 0.5).slice(0, 5))\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "certificationsService",
                        "type": "CertificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "certificationsService",
                        "type": "CertificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-3a845c445a35497b54541de40419f7ed0a2b240165e3045e5f95553c6fe81a454a56bf307fca96a47fc4e05ae922e3e6a55acc3593e8225349097b3ec1d3440a",
            "file": "src/app/core/services/user/user.service.ts",
            "properties": [
                {
                    "name": "user$",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetrieves the current user as an Observable.\n",
                    "description": "<p>Retrieves the current user as an Observable.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 322,
                                "end": 329,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits the current user or null.</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the user from the session storage.\n",
                    "description": "<p>Loads the user from the session storage.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1021,
                                "end": 1028,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits the loaded user.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the user for the service.\n",
                    "description": "<p>Sets the user for the service.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 522,
                                "end": 526,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "user"
                            },
                            "type": "User | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 516,
                                "end": 521,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The user object to set. Pass <code>null</code> to clear the user.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the user in the session storage and the service.\n",
                    "description": "<p>Updates the user in the session storage and the service.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 732,
                                "end": 736,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 726,
                                "end": 731,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>The user object with the new information.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 785,
                                "end": 792,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>An Observable that emits a void value.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\r\nimport { BehaviorSubject, Observable, of } from 'rxjs'\r\nimport { User } from '@models'\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class UserService {\r\n\tprivate user$ = new BehaviorSubject<User | null>(null)\r\n\r\n\t/**\r\n\t * Retrieves the current user as an Observable.\r\n\t * @returns An Observable that emits the current user or null.\r\n\t */\r\n\tgetUser(): Observable<User | null> {\r\n\t\treturn this.user$.asObservable()\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user for the service.\r\n\t * @param user - The user object to set. Pass `null` to clear the user.\r\n\t */\r\n\tsetUser(user: User | null) {\r\n\t\tthis.user$.next(user)\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the user in the session storage and the service.\r\n\t * @param user The user object with the new information.\r\n\t * @returns An Observable that emits a void value.\r\n\t */\r\n\tupdateUser(user: User) {\r\n\t\tsessionStorage.setItem('user', JSON.stringify(user))\r\n\t\treturn of(this.user$.next(user))\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the user from the session storage.\r\n\t * @returns An Observable that emits the loaded user.\r\n\t */\r\n\tloadUser() {\r\n\t\tconst user = JSON.parse(sessionStorage.getItem('user') || 'null')\r\n\t\treturn of(this.user$.next(user))\r\n\t}\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2375920714bcaead52efa7d4b8c95fbda312741e63e7b08c59208733ce16951f4c032ab0020400fb0958482c7bd4804f3592ce2354074af5b38676eac1a0b513",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "tuiIconResolverProvider(icon => {\n    return icon.includes() ? icon.replace(, ) : icon;\n})",
                    "ns": "tuiIconResolverProvider(icon => {\n    return icon"
                },
                {
                    "name": "{\n    provide: IMAGE_LOADER, useValue: (config: ImageLoaderConfig) => {\n        const netlifyPath = ;\n        const imagePath = netlifyPathconfig.src;\n        const queryParams = new URLSearchParams([]);\n        const paramMapping = new Map([\n            [, ], [, ], [, ], [, ], [, ], [, ]\n        ]);\n        paramMapping.forEach((value, key) => {\n            if (config.loaderParams?.[key]) {\n                queryParams.append(value, config.loaderParams[key]);\n            }\n        });\n        return imagePathqueryParams.size >  ? queryParams.toString() : ;\n    }\n}",
                    "ns": "{\n    provide: IMAGE_LOADER, useValue: (config: ImageLoaderConfig) => {\n        const netlifyPath = ;\n        const imagePath = netlifyPathconfig"
                }
            ],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TuiRoot"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\r\nimport { IMAGE_LOADER, ImageLoaderConfig } from '@angular/common'\r\nimport { RouterOutlet } from '@angular/router'\r\nimport { tuiIconResolverProvider, TuiRoot } from '@taiga-ui/core'\r\n\r\n@Component({\r\n\tselector: 'app-root',\r\n\tstandalone: true,\r\n\timports: [RouterOutlet, TuiRoot],\r\n\tproviders: [\r\n\t\ttuiIconResolverProvider(icon => {\r\n\t\t\treturn icon.includes('tui') ? `assets/taiga-ui/icons/${icon.replace('@tui.', '')}.svg` : `icons/${icon}-duotone.svg`\r\n\t\t}),\r\n\t\t{\r\n\t\t\tprovide: IMAGE_LOADER,\r\n\t\t\tuseValue: (config: ImageLoaderConfig) => {\r\n\t\t\t\tconst netlifyPath = 'https://cinemafun.netlify.app/.netlify/images'\r\n\t\t\t\tconst imagePath = `${netlifyPath}?url=${config.src}`\r\n\r\n\t\t\t\tconst queryParams = new URLSearchParams([])\r\n\t\t\t\tconst paramMapping = new Map([\r\n\t\t\t\t\t['width', 'w'],\r\n\t\t\t\t\t['height', 'h'],\r\n\t\t\t\t\t['format', 'fm'],\r\n\t\t\t\t\t['quality', 'q'],\r\n\t\t\t\t\t['fit', 'fit'],\r\n\t\t\t\t\t['position', 'position']\r\n\t\t\t\t])\r\n\r\n\t\t\t\tparamMapping.forEach((value, key) => {\r\n\t\t\t\t\tif (config.loaderParams?.[key]) {\r\n\t\t\t\t\t\tqueryParams.append(value, config.loaderParams[key])\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn `${imagePath}${queryParams.size > 0 ? `&${queryParams.toString()}` : ''}`\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<tui-root tuiTheme=\"dark\">\r\n\t<div id=\"lights\">\r\n\t\t<div class=\"pink\"></div>\r\n\t\t<div class=\"blue\"></div>\r\n\t\t<div class=\"second-blue\"></div>\r\n\t\t<div class=\"green\"></div>\r\n\t\t<div class=\"yellow\"></div>\r\n\t</div>\r\n\r\n\t<router-outlet />\r\n</tui-root>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-45620cb1b5b81fddeec93e97a1902fa60a3e76b5415abf9141f1138cca7ee0ae2509ccfcbc79e4e906462ed8287f150cc3bca326e26109b847458e20487cf59a",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "appearance",
                    "defaultValue": "input<'primary' | 'accent'>('primary')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                },
                {
                    "name": "form",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "iconLeading",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "iconTrailing",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "isIconButton",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": false
                },
                {
                    "name": "label",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "size",
                    "defaultValue": "input<TuiSizeXS | TuiSizeXL>('l')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "defaultValue": "input.required<'submit' | 'reset' | 'button'>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiButtonLoading"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, Component, input, model, output } from '@angular/core'\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\r\nimport { TuiButton, TuiSizeXL, TuiSizeXS } from '@taiga-ui/core'\r\nimport { TuiButtonLoading } from '@taiga-ui/kit'\r\nimport { combineLatest } from 'rxjs'\r\nimport { CoreService } from '@services'\r\n\r\n@Component({\r\n\tselector: 'cf-button',\r\n\tstandalone: true,\r\n\timports: [TuiButton, TuiButtonLoading],\r\n\ttemplateUrl: './button.component.html',\r\n\tstyleUrl: './button.component.scss'\r\n})\r\nexport class ButtonComponent {\r\n\ttype = input.required<'submit' | 'reset' | 'button'>()\r\n\tlabel = input('')\r\n\tform = input('')\r\n\tappearance = input<'primary' | 'accent'>('primary')\r\n\ticonLeading = input('')\r\n\ticonTrailing = input('')\r\n\tsize = input<TuiSizeXS | TuiSizeXL>('l')\r\n\tisIconButton = input(false, { transform: booleanAttribute })\r\n\tisDisabled = model(false)\r\n\tisLoading = model(false)\r\n\r\n\tbuttonClick = output()\r\n\r\n\tconstructor(private coreService: CoreService) {\r\n\t\tcombineLatest({\r\n\t\t\t_isLoading: this.coreService.getIsButtonLoading(),\r\n\t\t\t_isDisabled: this.coreService.getIsButtonDisabled()\r\n\t\t})\r\n\t\t\t.pipe(takeUntilDestroyed())\r\n\t\t\t.subscribe(({ _isLoading, _isDisabled }) => {\r\n\t\t\t\tthis.isLoading.set(_isLoading)\r\n\t\t\t\tthis.isDisabled.set(_isDisabled)\r\n\t\t\t})\r\n\t}\r\n\r\n\tonButtonClick() {\r\n\t\tthis.buttonClick.emit()\r\n\t}\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (!isIconButton()) {\r\n\t<button\r\n\t\ttuiButton\r\n\t\tclass=\"cf-button\"\r\n\t\t[type]=\"type()\"\r\n\t\t[appearance]=\"appearance()\"\r\n\t\t[iconStart]=\"iconLeading()\"\r\n\t\t[iconEnd]=\"iconTrailing()\"\r\n\t\t[size]=\"size()\"\r\n\t\t[disabled]=\"isDisabled()\"\r\n\t\t[loading]=\"isLoading()\"\r\n\t\t[attr.form]=\"form()\"\r\n\t\t(click)=\"onButtonClick()\">\r\n\t\t{{ label() }}\r\n\t</button>\r\n} @else {\r\n\t<button\r\n\t\ttuiIconButton\r\n\t\tclass=\"cf-fab-button\"\r\n\t\t[type]=\"type()\"\r\n\t\t[appearance]=\"appearance()\"\r\n\t\t[iconStart]=\"iconLeading()\"\r\n\t\t[size]=\"size()\"\r\n\t\t[disabled]=\"isDisabled()\"\r\n\t\t[loading]=\"isLoading()\"\r\n\t\t[attr.form]=\"form()\"\r\n\t\t(click)=\"onButtonClick()\"></button>\r\n}\r\n"
        },
        {
            "name": "CarouselComponent",
            "id": "component-CarouselComponent-432532a4e7b0289401b279cb3bb69a1a3e7c55807a98f253cbaaf1f9e4d20fad9a092fcc4d0e309cdd5c4d428d6eb78d41425a2b247cb5a483f7d916d36857cf",
            "file": "src/app/shared/components/carousel/carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-carousel",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./carousel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addFade",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                },
                {
                    "name": "duration",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": false
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                },
                {
                    "name": "loaderParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addFade",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                },
                {
                    "name": "backdropSizes$",
                    "defaultValue": "this.apiConfigurationService.getBackdropSizes()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "duration",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": false
                },
                {
                    "name": "imagesPath$",
                    "defaultValue": "this.apiConfigurationService.getImagesPath()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "isDraggable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                },
                {
                    "name": "isImageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isSignUp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "items",
                    "defaultValue": "input.required<CarouselItem[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loaderParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": false
                },
                {
                    "name": "pagination",
                    "defaultValue": "viewChild<{ el: ElementRef<HTMLDivElement> }>('pagination')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "paginationSize",
                    "defaultValue": "input<TuiSizeS | TuiSizeL>('s')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "posterSizes$",
                    "defaultValue": "this.apiConfigurationService.getPosterSizes()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "getMediaQuery",
                    "args": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns a media query string based on the provided size.\n",
                    "description": "<p>Returns a media query string based on the provided size.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2026,
                                "end": 2030,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "size"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2011,
                                "end": 2016,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The size of the media query in the format &#39;Xw&#39;, where X is the width in pixels.</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 2017,
                                "end": 2025,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 316,
                                "type": {
                                    "pos": 2018,
                                    "end": 2024,
                                    "flags": 16777216,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 154
                                }
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2119,
                                "end": 2126,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A media query string in the format &#39;(max-width: Xpx)&#39;.</p>\n"
                        }
                    ]
                },
                {
                    "name": "nextSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves to the next slide in the carousel.\n",
                    "description": "<p>Moves to the next slide in the carousel.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallback function triggered when an image finishes loading.\nSets the `isImageLoading` property to `false`.\n",
                    "description": "<p>Callback function triggered when an image finishes loading.\nSets the <code>isImageLoading</code> property to <code>false</code>.</p>\n"
                },
                {
                    "name": "previousSlide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMoves the carousel to the previous slide.\n",
                    "description": "<p>Moves the carousel to the previous slide.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "NgTemplateOutlet"
                },
                {
                    "name": "TuiCarousel"
                },
                {
                    "name": "TuiPagination"
                },
                {
                    "name": "TuiHint"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "GenrePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, input, model, Renderer2, viewChild } from '@angular/core'\r\nimport { AsyncPipe, NgClass, NgOptimizedImage, NgTemplateOutlet } from '@angular/common'\r\nimport { Router } from '@angular/router'\r\nimport { TuiHint, TuiSizeL, TuiSizeS } from '@taiga-ui/core'\r\nimport { TuiCarousel, TuiPagination } from '@taiga-ui/kit'\r\nimport { CarouselItem, LoaderParams } from '@models'\r\nimport { ApiConfigurationService } from '@services'\r\nimport { GenrePipe } from '@pipes'\r\nimport { ButtonComponent } from '../button/button.component'\r\n\r\n@Component({\r\n\tselector: 'cf-carousel',\r\n\tstandalone: true,\r\n\timports: [\r\n\t\tAsyncPipe,\r\n\t\tNgClass,\r\n\t\tNgOptimizedImage,\r\n\t\tNgTemplateOutlet,\r\n\t\tTuiCarousel,\r\n\t\tTuiPagination,\r\n\t\tTuiHint,\r\n\t\tButtonComponent,\r\n\t\tGenrePipe\r\n\t],\r\n\ttemplateUrl: './carousel.component.html',\r\n\tstyleUrl: './carousel.component.scss'\r\n})\r\nexport class CarouselComponent implements AfterViewInit {\r\n\titems = input.required<CarouselItem[]>()\r\n\tduration = input(10000)\r\n\tisDraggable = input(false)\r\n\taddFade = input(false)\r\n\tpaginationSize = input<TuiSizeS | TuiSizeL>('s')\r\n\tloaderParams = input<LoaderParams>()\r\n\tindex = model(0)\r\n\r\n\tpagination = viewChild<{ el: ElementRef<HTMLDivElement> }>('pagination')\r\n\r\n\tisImageLoading = true\r\n\tisSignUp = false\r\n\r\n\timagesPath$ = this.apiConfigurationService.getImagesPath()\r\n\tbackdropSizes$ = this.apiConfigurationService.getBackdropSizes()\r\n\tposterSizes$ = this.apiConfigurationService.getPosterSizes()\r\n\r\n\tconstructor(\r\n\t\tprivate apiConfigurationService: ApiConfigurationService,\r\n\t\tprivate renderer: Renderer2,\r\n\t\tprivate router: Router\r\n\t) {\r\n\t\tthis.isSignUp = this.router.url.includes('sign-up')\r\n\t}\r\n\r\n\tngAfterViewInit(): void {\r\n\t\tconst buttons = this.pagination()?.el.nativeElement.querySelectorAll('button')\r\n\t\tbuttons?.forEach((button, index) => {\r\n\t\t\tthis.renderer.setAttribute(button, 'aria-label', `carousel-button-${index + 1}`)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a media query string based on the provided size.\r\n\t * @param {string} size - The size of the media query in the format 'Xw', where X is the width in pixels.\r\n\t * @returns A media query string in the format '(max-width: Xpx)'.\r\n\t */\r\n\tgetMediaQuery(size: string) {\r\n\t\tconst formattedSize = size.replace('w', '')\r\n\t\treturn `(max-width: ${formattedSize}px)`\r\n\t}\r\n\r\n\t/**\r\n\t * Callback function triggered when an image finishes loading.\r\n\t * Sets the `isImageLoading` property to `false`.\r\n\t */\r\n\tonImageLoad() {\r\n\t\tthis.isImageLoading = false\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the carousel to the previous slide.\r\n\t */\r\n\tpreviousSlide() {\r\n\t\tthis.index.set(this.index() - 1 < 0 ? this.items().length - 1 : this.index() - 1)\r\n\t}\r\n\r\n\t/**\r\n\t * Moves to the next slide in the carousel.\r\n\t */\r\n\tnextSlide() {\r\n\t\tthis.index.set(this.index() + 1 >= this.items().length ? 0 : this.index() + 1)\r\n\t}\r\n}\r\n",
            "styleUrl": "./carousel.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiConfigurationService",
                        "type": "ApiConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "apiConfigurationService",
                        "type": "ApiConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "@let imagesPath = imagesPath$ | async;\r\n\r\n<!-- Previous button -->\r\n@if (!isSignUp) {\r\n\t<cf-button\r\n\t\t[isIconButton]=\"true\"\r\n\t\t[type]=\"'button'\"\r\n\t\t[iconLeading]=\"'tuiIconChevronLeftLarge'\"\r\n\t\t[tuiHint]=\"'Previous'\"\r\n\t\t(buttonClick)=\"previousSlide()\"\r\n\t\taria-label=\"Previous page\" />\r\n}\r\n\r\n<!-- Carousel with pagination -->\r\n<tui-carousel\r\n\t[duration]=\"duration()\"\r\n\t[draggable]=\"isDraggable()\"\r\n\t[(index)]=\"index\"\r\n\t[ngClass]=\"{ fade: addFade(), rounded: !isSignUp }\">\r\n\t@for (item of items(); track item.id) {\r\n\t\t<picture\r\n\t\t\t*tuiItem\r\n\t\t\t[tuiHint]=\"isSignUp ? item.hint : null\"\r\n\t\t\t[tuiHintDescribe]=\"item.id\"\r\n\t\t\t[tuiHintDirection]=\"'top-left'\"\r\n\t\t\t[tuiHintShowDelay]=\"1000\"\r\n\t\t\ttuiHintPointer\r\n\t\t\t[ngClass]=\"{ 'skeleton-image': isImageLoading }\">\r\n\t\t\t@for (size of backdropSizes$ | async; track $index) {\r\n\t\t\t\t@let bannerPath = imagesPath + size + item.image;\r\n\r\n\t\t\t\t@if (size.includes('original')) {\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\t[ngSrc]=\"bannerPath\"\r\n\t\t\t\t\t\t[loaderParams]=\"loaderParams()\"\r\n\t\t\t\t\t\t[alt]=\"item.alt\"\r\n\t\t\t\t\t\t(load)=\"onImageLoad()\"\r\n\t\t\t\t\t\tpriority\r\n\t\t\t\t\t\tplaceholder\r\n\t\t\t\t\t\tfill />\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t<source [srcset]=\"bannerPath\" [media]=\"getMediaQuery(size)\" />\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t@if (!isSignUp) {\r\n\t\t\t\t<ng-container *ngTemplateOutlet=\"movieInfo; context: { movie: item }\" />\r\n\t\t\t}\r\n\t\t</picture>\r\n\t}\r\n</tui-carousel>\r\n<tui-pagination\r\n\t#pagination\r\n\t[size]=\"paginationSize()\"\r\n\t[(index)]=\"index\"\r\n\t[length]=\"items().length\"\r\n\t[ngClass]=\"{ 'sign-up': isSignUp }\" />\r\n\r\n<!-- Next button -->\r\n@if (!isSignUp) {\r\n\t<cf-button\r\n\t\t[isIconButton]=\"true\"\r\n\t\t[type]=\"'button'\"\r\n\t\t[iconLeading]=\"'tuiIconChevronRightLarge'\"\r\n\t\t[tuiHint]=\"'Next'\"\r\n\t\t(buttonClick)=\"nextSlide()\"\r\n\t\taria-label=\"Next page\" />\r\n}\r\n\r\n<!-- Movie poster -->\r\n<ng-template #movieInfo let-movie=\"movie\">\r\n\t<div class=\"movie-info\">\r\n\t\t<picture>\r\n\t\t\t@for (size of posterSizes$ | async; track $index) {\r\n\t\t\t\t@let posterPath = imagesPath + size + movie.movie.poster;\r\n\r\n\t\t\t\t@if (size.includes('original')) {\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\t[ngSrc]=\"posterPath\"\r\n\t\t\t\t\t\t[alt]=\"movie.movie.title + 'poster'\"\r\n\t\t\t\t\t\t[loaderParams]=\"{ width: 176, height: 288, fit: 'cover' }\"\r\n\t\t\t\t\t\t(load)=\"onImageLoad()\"\r\n\t\t\t\t\t\tpriority\r\n\t\t\t\t\t\tplaceholder\r\n\t\t\t\t\t\tfill />\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t<source [srcset]=\"posterPath\" [media]=\"getMediaQuery(size)\" />\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t</picture>\r\n\t\t<section>\r\n\t\t\t<article>\r\n\t\t\t\t<p>{{ movie.movie.title }}</p>\r\n\t\t\t\t<p>{{ movie.movie.genre | genre }}</p>\r\n\t\t\t</article>\r\n\t\t\t<cf-button [type]=\"'button'\" [label]=\"'Watch the trailer'\" [iconTrailing]=\"'play-circle'\" />\r\n\t\t</section>\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "FavoritesComponent",
            "id": "component-FavoritesComponent-5352dc716f45e60f619ae93b04855f24a73a4bd07a5e9f279027f3ec574cec5ee3a9900a540554b9bcd58e912b25bb3cdc155febdb04ee13c0df00344b8ee9e9",
            "file": "src/app/features/main/favorites/favorites.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-favorites",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./favorites.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cf-favorites',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './favorites.component.html',\r\n  styleUrl: './favorites.component.scss'\r\n})\r\nexport class FavoritesComponent {\r\n\r\n}\r\n",
            "styleUrl": "./favorites.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>favorites works!</p>\r\n"
        },
        {
            "name": "FoodDrinksComponent",
            "id": "component-FoodDrinksComponent-3fecd76ab6a63cf8c71a519e96f9bd85f0f69bb937ab0daa6b68bb798cc87d405d66210b216f97696286d4a54736d14869963cd2bcebe5740a605a55d474182b",
            "file": "src/app/features/main/food-drinks/food-drinks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-food-drinks",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./food-drinks.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cf-food-drinks',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './food-drinks.component.html',\r\n  styleUrl: './food-drinks.component.scss'\r\n})\r\nexport class FoodDrinksComponent {\r\n\r\n}\r\n",
            "styleUrl": "./food-drinks.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>food-drinks works!</p>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-2d1ef7a715953f2820df3ecec0f3ef3d4c6987cdb17c46895dd185a017f9bbd140b33d7a8c0ab575c18056affe65f169ae34900397e5e8c48706617cacec446b",
            "file": "src/app/shared/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "coreService",
                    "defaultValue": "inject(CoreService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentYear",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "socialMedia",
                    "defaultValue": "this.coreService.getSocialMedia()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core'\r\nimport { AsyncPipe } from '@angular/common'\r\nimport { CoreService } from '@services'\r\nimport { IconComponent } from '../icon/icon.component'\r\nimport { LogoComponent } from '../logo/logo.component'\r\n\r\n@Component({\r\n\tselector: 'cf-footer',\r\n\tstandalone: true,\r\n\timports: [AsyncPipe, LogoComponent, IconComponent],\r\n\ttemplateUrl: './footer.component.html',\r\n\tstyleUrl: './footer.component.scss'\r\n})\r\nexport class FooterComponent {\r\n\tcoreService = inject(CoreService)\r\n\tsocialMedia = this.coreService.getSocialMedia()\r\n\tcurrentYear = new Date().getFullYear()\r\n}\r\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer>\r\n\t<cf-logo />\r\n\t<ul>\r\n\t\t@for (media of socialMedia | async; track media.id) {\r\n\t\t\t<li>\r\n\t\t\t\t<a [href]=\"media.link\" rel=\"noreferrer\" target=\"_blank\">\r\n\t\t\t\t\t<cf-icon [icon]=\"media.icon\" />\r\n\t\t\t\t</a>\r\n\t\t\t</li>\r\n\t\t}\r\n\t</ul>\r\n\t<section>\r\n\t\t<small>&copy; Copyright {{ currentYear }}. CINEMAFUN</small>\r\n\t\t<small>Made with 💖 by Nathalie Zambrano</small>\r\n\t</section>\r\n</footer>\r\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-2c0ebba8601fe5c0937056cd353c1f4a13ec988b91c150178462cfa9ae8c0a2aaa9f6820bd9ba838e7fd1153571b0bc987e4f474c01a85562ebc7d0cc3c4eb82",
            "file": "src/app/shared/components/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormFieldComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "tuiNumberFormatProvider({\n    decimalSeparator: , thousandSeparator: \n})"
                }
            ],
            "selector": "cf-form-field",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "nativeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": true
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "autoCapitalize",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "filler",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "formField",
                    "defaultValue": "viewChild<{ textfield: { el: ElementRef<HTMLDivElement> } }>('formField')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "hint",
                    "defaultValue": "input<string | undefined>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "hintDirection",
                    "defaultValue": "input<TuiHintDirection>('bottom')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "iconLeading",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "iconTrailing",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isRequired",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "label",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "nativeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "required": true
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "required": true
                },
                {
                    "name": "postfix",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "prefix",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "showCleaner",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "spellCheck",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "type",
                    "defaultValue": "input.required<'text' | 'email' | 'password' | 'number'>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "onNgModelChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiInputNumberModule",
                    "type": "module"
                },
                {
                    "name": "TuiInputPasswordModule",
                    "type": "module"
                },
                {
                    "name": "TuiHint"
                },
                {
                    "name": "TuiLabel"
                },
                {
                    "name": "TuiError"
                },
                {
                    "name": "TuiFieldErrorPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, Component, ElementRef, forwardRef, input, viewChild } from '@angular/core'\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\r\nimport { CommonModule } from '@angular/common'\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms'\r\nimport { TuiLabel, TuiError, TuiHint, TuiHintDirection, tuiNumberFormatProvider } from '@taiga-ui/core'\r\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit'\r\nimport {\r\n\tTuiInputModule,\r\n\tTuiInputNumberModule,\r\n\tTuiInputPasswordModule,\r\n\tTuiTextfieldControllerModule\r\n} from '@taiga-ui/legacy'\r\nimport { CoreService } from '@services'\r\n\r\n@Component({\r\n\tselector: 'cf-form-field',\r\n\tstandalone: true,\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tFormsModule,\r\n\t\tTuiInputModule,\r\n\t\tTuiInputNumberModule,\r\n\t\tTuiInputPasswordModule,\r\n\t\tTuiHint,\r\n\t\tTuiLabel,\r\n\t\tTuiError,\r\n\t\tTuiFieldErrorPipe,\r\n\t\tTuiTextfieldControllerModule\r\n\t],\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\tuseExisting: forwardRef(() => FormFieldComponent),\r\n\t\t\tmulti: true\r\n\t\t},\r\n\t\ttuiNumberFormatProvider({\r\n\t\t\tdecimalSeparator: '.',\r\n\t\t\tthousandSeparator: ' '\r\n\t\t})\r\n\t],\r\n\ttemplateUrl: './form-field.component.html',\r\n\tstyleUrl: './form-field.component.scss'\r\n})\r\nexport class FormFieldComponent implements ControlValueAccessor {\r\n\tnativeId = input.required<string>()\r\n\tplaceholder = input.required<string>()\r\n\ttype = input.required<'text' | 'email' | 'password' | 'number'>()\r\n\tlabel = input('')\r\n\ticonLeading = input('')\r\n\ticonTrailing = input('')\r\n\tfiller = input('')\r\n\thint = input<string | undefined>('')\r\n\thintDirection = input<TuiHintDirection>('bottom')\r\n\tprefix = input('')\r\n\tpostfix = input('')\r\n\tshowCleaner = input(false, { transform: booleanAttribute })\r\n\tspellCheck = input(false, { transform: booleanAttribute })\r\n\tautoCapitalize = input(false, { transform: booleanAttribute })\r\n\tisRequired = input(false, { transform: booleanAttribute })\r\n\r\n\tformField = viewChild<{ textfield: { el: ElementRef<HTMLDivElement> } }>('formField')\r\n\r\n\tisDisabled = false\r\n\tvalue!: string | number | null\r\n\r\n\tconstructor(private coreService: CoreService) {\r\n\t\tthis.coreService\r\n\t\t\t.getIsFormFieldDisabled()\r\n\t\t\t.pipe(takeUntilDestroyed())\r\n\t\t\t.subscribe(_isDisabled => (this.isDisabled = _isDisabled))\r\n\t}\r\n\r\n\t// ngAfterViewInit(): void {\r\n\t// \tconst inputField = this.formField()?.textfield.el.nativeElement.querySelector('input')\r\n\t// \tinputField?.setAttribute('id', this.nativeId())\r\n\t// \tinputField?.setAttribute('autocomplete', 'true')\r\n\t// }\r\n\r\n\tonNgModelChange(value: string | number) {\r\n\t\tthis.value = value || null\r\n\t\tthis.onTouched()\r\n\t\tthis.onChange(this.value)\r\n\t}\r\n\r\n\tonChange = (_: any) => {}\r\n\tonTouched = () => {}\r\n\r\n\twriteValue(value: string): void {\r\n\t\tif (value === undefined) return\r\n\t\tthis.value = value || null\r\n\t}\r\n\r\n\tregisterOnChange(fn: any): void {\r\n\t\tthis.onChange = fn\r\n\t}\r\n\r\n\tregisterOnTouched(fn: any): void {\r\n\t\tthis.onTouched = fn\r\n\t}\r\n\r\n\tsetDisabledState(isDisabled: boolean): void {\r\n\t\tthis.isDisabled = isDisabled\r\n\t}\r\n}\r\n",
            "styleUrl": "./form-field.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<label tuiLabel [htmlFor]=\"nativeId()\" [ngClass]=\"{ 'no-margin': label() === '' }\">\r\n\t<ng-container *ngTemplateOutlet=\"formFieldLabel\"></ng-container>\r\n\t@switch (type()) {\r\n\t\t@case ('number') {\r\n\t\t\t<tui-input-number\r\n\t\t\t\t#formField\r\n\t\t\t\t[nativeId]=\"nativeId()\"\r\n\t\t\t\t[tuiTextfieldLabelOutside]=\"true\"\r\n\t\t\t\t[tuiTextfieldCleaner]=\"showCleaner()\"\r\n\t\t\t\t[tuiTextfieldIconLeft]=\"iconLeading()\"\r\n\t\t\t\t[tuiTextfieldIcon]=\"iconTrailing()\"\r\n\t\t\t\t[tuiTextfieldFiller]=\"filler()\"\r\n\t\t\t\t[tuiTextfieldPrefix]=\"prefix()\"\r\n\t\t\t\t[tuiTextfieldPostfix]=\"postfix()\"\r\n\t\t\t\t[tuiHintContent]=\"hint()\"\r\n\t\t\t\t[tuiHintDirection]=\"hintDirection()\"\r\n\t\t\t\t[disabled]=\"isDisabled\"\r\n\t\t\t\t[(ngModel)]=\"value\"\r\n\t\t\t\t(ngModelChange)=\"onNgModelChange($event)\">\r\n\t\t\t\t{{ placeholder() }}\r\n\t\t\t</tui-input-number>\r\n\t\t}\r\n\r\n\t\t@case ('password') {\r\n\t\t\t<tui-input-password\r\n\t\t\t\t#formField\r\n\t\t\t\t[nativeId]=\"nativeId()\"\r\n\t\t\t\t[tuiTextfieldLabelOutside]=\"true\"\r\n\t\t\t\t[tuiTextfieldCleaner]=\"showCleaner()\"\r\n\t\t\t\t[tuiTextfieldIconLeft]=\"iconLeading()\"\r\n\t\t\t\t[tuiTextfieldIcon]=\"iconTrailing()\"\r\n\t\t\t\t[tuiTextfieldFiller]=\"filler()\"\r\n\t\t\t\t[tuiTextfieldPrefix]=\"prefix()\"\r\n\t\t\t\t[tuiTextfieldPostfix]=\"postfix()\"\r\n\t\t\t\t[tuiHintContent]=\"hint()\"\r\n\t\t\t\t[tuiHintDirection]=\"hintDirection()\"\r\n\t\t\t\t[disabled]=\"isDisabled\"\r\n\t\t\t\t[(ngModel)]=\"value\"\r\n\t\t\t\t(ngModelChange)=\"onNgModelChange($event)\">\r\n\t\t\t\t{{ placeholder() }}\r\n\t\t\t</tui-input-password>\r\n\t\t}\r\n\r\n\t\t@default {\r\n\t\t\t<tui-input\r\n\t\t\t\t#formField\r\n\t\t\t\t[nativeId]=\"nativeId()\"\r\n\t\t\t\t[tuiTextfieldLabelOutside]=\"true\"\r\n\t\t\t\t[tuiTextfieldCleaner]=\"showCleaner()\"\r\n\t\t\t\t[tuiTextfieldIconLeft]=\"iconLeading()\"\r\n\t\t\t\t[tuiTextfieldIcon]=\"iconTrailing()\"\r\n\t\t\t\t[tuiTextfieldFiller]=\"filler()\"\r\n\t\t\t\t[tuiTextfieldPrefix]=\"prefix()\"\r\n\t\t\t\t[tuiTextfieldPostfix]=\"postfix()\"\r\n\t\t\t\t[tuiHintContent]=\"hint()\"\r\n\t\t\t\t[tuiHintDirection]=\"hintDirection()\"\r\n\t\t\t\t[disabled]=\"isDisabled\"\r\n\t\t\t\t[autocapitalize]=\"autoCapitalize()\"\r\n\t\t\t\t[spellcheck]=\"spellCheck()\"\r\n\t\t\t\t[(ngModel)]=\"value\"\r\n\t\t\t\t(ngModelChange)=\"onNgModelChange($event)\">\r\n\t\t\t\t{{ placeholder() }}\r\n\t\t\t</tui-input>\r\n\t\t}\r\n\t}\r\n\t<tui-error [error]=\"[] | tuiFieldError | async\" />\r\n</label>\r\n\r\n<ng-template #formFieldLabel>\r\n\t<div class=\"label\">\r\n\t\t{{ label() }}\r\n\r\n\t\t@if (isRequired()) {\r\n\t\t\t<span class=\"required\" [tuiHint]=\"'🔴 Field is required'\" [tuiHintDirection]=\"'top-right'\">*</span>\r\n\t\t}\r\n\t</div>\r\n</ng-template>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-cf04f6c352a71195d64cd4144b4da33e59180d7f9d4b5e2b34c4beef01dcbf39ad84a75b1703ade076b632a461f2db5da340968d743799cf1fe9520a8791c36e",
            "file": "src/app/features/main/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carousel$",
                    "defaultValue": "this.movieService.getMoviesCarousel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "movies$",
                    "defaultValue": "this.movieService.getMoviesForHome()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "movieService",
                    "defaultValue": "inject(MovieService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "CarouselComponent",
                    "type": "component"
                },
                {
                    "name": "MovieComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe } from '@angular/common'\r\nimport { Component, inject } from '@angular/core'\r\nimport { CarouselComponent, MovieComponent } from '@components'\r\nimport { MovieService } from '@services'\r\n\r\n@Component({\r\n\tselector: 'cf-home',\r\n\tstandalone: true,\r\n\timports: [AsyncPipe, CarouselComponent, MovieComponent],\r\n\ttemplateUrl: './home.component.html',\r\n\tstyleUrl: './home.component.scss'\r\n})\r\nexport class HomeComponent {\r\n\tmovieService = inject(MovieService)\r\n\tmovies$ = this.movieService.getMoviesForHome()\r\n\tcarousel$ = this.movieService.getMoviesCarousel()\r\n}\r\n",
            "styleUrl": "./home.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<cf-carousel [items]=\"(carousel$ | async) || []\" [loaderParams]=\"{ width: 1570, height: 560, fit: 'cover' }\" />\r\n\r\n<section>\r\n\t@for (movie of movies$ | async; track movie.id; let first = $first) {\r\n\t\t<cf-movie\r\n\t\t\t[id]=\"movie.id\"\r\n\t\t\t[title]=\"movie.title\"\r\n\t\t\t[poster]=\"movie.poster\"\r\n\t\t\t[genre]=\"movie.genre\"\r\n\t\t\t[runtime]=\"movie.runtime\"\r\n\t\t\t[classification]=\"movie.classification.classification\"\r\n\t\t\t[meaning]=\"movie.classification.meaning\"\r\n\t\t\t[isFirst]=\"first\" />\r\n\t}\r\n</section>\r\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-b9944e3acaa713828f7b51dd00c689748fc672e635a50a03e9849c1ddcb08e17446935bce1ad09b1a5e4b2578960d625e056a67d147662172c85f3526a9ce4a1",
            "file": "src/app/shared/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "tuiIconResolverProvider(icon => (icon.includes() ? icon : icon))",
                    "ns": "tuiIconResolverProvider(icon => (icon"
                }
            ],
            "selector": "cf-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "defaultValue": "input<string | string[] | Set<string> | { [klass: string]: any } | null | undefined>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "TuiIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input } from '@angular/core'\r\nimport { NgClass } from '@angular/common'\r\nimport { TuiIcon, tuiIconResolverProvider } from '@taiga-ui/core'\r\n\r\n@Component({\r\n\tselector: 'cf-icon',\r\n\tstandalone: true,\r\n\timports: [NgClass, TuiIcon],\r\n\tproviders: [tuiIconResolverProvider(icon => (icon.includes('@tui') ? icon : `icons/${icon}-duotone.svg`))],\r\n\ttemplateUrl: './icon.component.html',\r\n\tstyleUrl: './icon.component.scss'\r\n})\r\nexport class IconComponent {\r\n\ticon = input.required<string>()\r\n\tclasses = input<string | string[] | Set<string> | { [klass: string]: any } | null | undefined>(null)\r\n}\r\n",
            "styleUrl": "./icon.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<tui-icon [icon]=\"icon()\" [ngClass]=\"classes()\" />\r\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-340089ea1f25030e58c0943da4c3a4925cb57decb021be751c2abd1884931ae83447d3e3f2bc87e7da994d54471e274fc93124791bae81b5679e6623b8aa9762",
            "file": "src/app/shared/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSubtitle",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "TuiTitle"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, Component, input } from '@angular/core'\r\nimport { RouterLink } from '@angular/router'\r\nimport { TuiTitle } from '@taiga-ui/core'\r\nimport { IconComponent } from '../icon/icon.component'\r\n\r\n@Component({\r\n\tselector: 'cf-logo',\r\n\tstandalone: true,\r\n\timports: [RouterLink, TuiTitle, IconComponent],\r\n\ttemplateUrl: './logo.component.html',\r\n\tstyleUrl: './logo.component.scss'\r\n})\r\nexport class LogoComponent {\r\n\tisSubtitle = input(false, { transform: booleanAttribute })\r\n}\r\n",
            "styleUrl": "./logo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a routerLink=\"/\">\r\n\t<cf-icon [icon]=\"'film-slate'\" [classes]=\"{ subtitle: isSubtitle(), primary: true, 'fs-extra-big': true }\" />\r\n\r\n\t@if (isSubtitle()) {\r\n\t\t<h2 [tuiTitle]=\"'s'\">Cinemafun</h2>\r\n\t} @else {\r\n\t\t<h1 [tuiTitle]=\"'m'\">Cinemafun</h1>\r\n\t}\r\n</a>\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-4d6568cda70b8bf20b8feba00ff658b7dec99a94f6875cc486f8cb70a49145617711656e9deb0a863e943eb7e9d67edab7c607346fdfcc2e6c864791c7eb37b0",
            "file": "src/app/features/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "MovieComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\r\nimport { RouterOutlet } from '@angular/router'\r\nimport { ButtonComponent, FooterComponent, MovieComponent, NavbarComponent, SidebarComponent } from '@components'\r\n\r\n@Component({\r\n\tselector: 'cf-main',\r\n\tstandalone: true,\r\n\timports: [RouterOutlet, NavbarComponent, SidebarComponent, FooterComponent, MovieComponent, ButtonComponent],\r\n\ttemplateUrl: './main.component.html',\r\n\tstyleUrl: './main.component.scss'\r\n})\r\nexport class MainComponent {}\r\n",
            "styleUrl": "./main.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<cf-navbar />\r\n\r\n<div>\r\n\t<cf-sidebar />\r\n\t<section>\r\n\t\t<main>\r\n\t\t\t<router-outlet />\r\n\t\t</main>\r\n\t\t<cf-footer />\r\n\t</section>\r\n</div>\r\n"
        },
        {
            "name": "MovieComponent",
            "id": "component-MovieComponent-3876365ff2856a21be5f1e0c04938f95a5420c74cfe270719636c812f5a2fd8a188d2c04925b66045043c2849371b72446690527af67d4f87b41d9dc82f6d709",
            "file": "src/app/shared/components/movie/movie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-movie",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./movie.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": true
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "required": true
                },
                {
                    "name": "isFirst",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "required": false
                },
                {
                    "name": "poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": true
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "required": true
                },
                {
                    "name": "classificationColor",
                    "defaultValue": "computed(() => this.classifications.get(this.classification()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "classifications",
                    "defaultValue": "new Map([\r\n\t\t['G', 'general'],\r\n\t\t['PG', 'parental-guidance'],\r\n\t\t['PG-13', 'parental-guidance-13'],\r\n\t\t['R', 'restricted'],\r\n\t\t['NC-17', 'adults-only']\r\n\t])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "genre",
                    "defaultValue": "input.required<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "required": true
                },
                {
                    "name": "imagesPath$",
                    "defaultValue": "this.apiConfigurationService.getImagesPath()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "isFirst",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "required": false
                },
                {
                    "name": "isImageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "meaning",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": true
                },
                {
                    "name": "posterSizes$",
                    "defaultValue": "this.apiConfigurationService.getPosterSizes()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "required": true
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": true
                }
            ],
            "methodsClass": [
                {
                    "name": "getMediaQuery",
                    "args": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onImageLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "TuiIslandDirective",
                    "type": "directive"
                },
                {
                    "name": "TuiLineClamp"
                },
                {
                    "name": "TuiHint"
                },
                {
                    "name": "GenrePipe",
                    "type": "pipe"
                },
                {
                    "name": "RuntimePipe",
                    "type": "pipe"
                },
                {
                    "name": "ClassificationPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, input } from '@angular/core'\r\nimport { AsyncPipe, NgClass, NgOptimizedImage } from '@angular/common'\r\nimport { RouterLink } from '@angular/router'\r\nimport { TuiHint } from '@taiga-ui/core'\r\nimport { TuiLineClamp } from '@taiga-ui/kit'\r\nimport { TuiIslandDirective } from '@taiga-ui/legacy'\r\nimport { ClassificationPipe, GenrePipe, RuntimePipe } from '@pipes'\r\nimport { ApiConfigurationService } from '@services'\r\n\r\n@Component({\r\n\tselector: 'cf-movie',\r\n\tstandalone: true,\r\n\timports: [\r\n\t\tNgClass,\r\n\t\tRouterLink,\r\n\t\tAsyncPipe,\r\n\t\tNgOptimizedImage,\r\n\t\tTuiIslandDirective,\r\n\t\tTuiLineClamp,\r\n\t\tTuiHint,\r\n\t\tGenrePipe,\r\n\t\tRuntimePipe,\r\n\t\tClassificationPipe\r\n\t],\r\n\ttemplateUrl: './movie.component.html',\r\n\tstyleUrl: './movie.component.scss'\r\n})\r\nexport class MovieComponent {\r\n\tid = input.required<number>()\r\n\ttitle = input.required<string>()\r\n\tposter = input.required<string>()\r\n\tgenre = input.required<string[]>()\r\n\truntime = input.required<number>()\r\n\tclassification = input.required<string>()\r\n\tmeaning = input('')\r\n\tisFirst = input(false)\r\n\r\n\tclassificationColor = computed(() => this.classifications.get(this.classification()))\r\n\tclassifications = new Map([\r\n\t\t['G', 'general'],\r\n\t\t['PG', 'parental-guidance'],\r\n\t\t['PG-13', 'parental-guidance-13'],\r\n\t\t['R', 'restricted'],\r\n\t\t['NC-17', 'adults-only']\r\n\t])\r\n\r\n\tisImageLoading = true\r\n\r\n\timagesPath$ = this.apiConfigurationService.getImagesPath()\r\n\tposterSizes$ = this.apiConfigurationService.getPosterSizes()\r\n\r\n\tconstructor(private apiConfigurationService: ApiConfigurationService) {}\r\n\r\n\tgetMediaQuery(size: string) {\r\n\t\tconst formattedSize = size.replace('w', '')\r\n\t\treturn `(max-width: ${formattedSize}px)`\r\n\t}\r\n\r\n\tonImageLoad() {\r\n\t\tthis.isImageLoading = false\r\n\t}\r\n}\r\n",
            "styleUrl": "./movie.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiConfigurationService",
                        "type": "ApiConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "apiConfigurationService",
                        "type": "ApiConfigurationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@defer (prefetch on idle) {\r\n\t<a tuiIsland [hoverable]=\"true\" [routerLink]=\"['/movie', id()]\">\r\n\t\t<picture class=\"tui-island__figure\" [ngClass]=\"{ 'skeleton-image': isImageLoading }\">\r\n\t\t\t@for (size of posterSizes$ | async; track $index) {\r\n\t\t\t\t@if (size.includes('original')) {\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\t[ngSrc]=\"(imagesPath$ | async) + size + poster()\"\r\n\t\t\t\t\t\t[loaderParams]=\"{ width: 266, height: 416, fit: 'cover' }\"\r\n\t\t\t\t\t\t[alt]=\"title() + 'poster'\"\r\n\t\t\t\t\t\t(load)=\"onImageLoad()\"\r\n\t\t\t\t\t\tpriority\r\n\t\t\t\t\t\tfill\r\n\t\t\t\t\t\tplaceholder />\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t<source\r\n\t\t\t\t\t\t[srcset]=\"(imagesPath$ | async) + size + poster() + '&fit=cover&w=640&q=80'\"\r\n\t\t\t\t\t\t[media]=\"getMediaQuery(size)\" />\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t</picture>\r\n\t\t<section class=\"tui-island__content\">\r\n\t\t\t<div>\r\n\t\t\t\t<tui-line-clamp class=\"tui-island__title\" [content]=\"title()\" [lineHeight]=\"16\" [linesLimit]=\"1\" />\r\n\t\t\t\t<tui-line-clamp class=\"tui-island__paragraph\" [content]=\"genre() | genre\" [lineHeight]=\"14\" [linesLimit]=\"1\" />\r\n\t\t\t</div>\r\n\t\t\t<p class=\"tui-island__paragraph\">\r\n\t\t\t\t<span>{{ runtime() | runtime }}</span>\r\n\t\t\t\t<span [ngClass]=\"classificationColor()\" [tuiHint]=\"meaning()\">{{ classification() | classification }}</span>\r\n\t\t\t</p>\r\n\t\t</section>\r\n\t</a>\r\n} @placeholder (minimum 600ms) {\r\n\t<div class=\"skeleton\">\r\n\t\t<div class=\"skeleton__image\"></div>\r\n\t\t<section class=\"skeleton__content\">\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"skeleton__title\"></div>\r\n\t\t\t\t<div class=\"skeleton__paragraph\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"skeleton__footer\"></div>\r\n\t\t</section>\r\n\t</div>\r\n} @loading (minimum 600ms) {\r\n\t<div class=\"skeleton\">\r\n\t\t<div class=\"skeleton__image\"></div>\r\n\t\t<section class=\"skeleton__content\">\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"skeleton__title\"></div>\r\n\t\t\t\t<div class=\"skeleton__paragraph\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"skeleton__footer\"></div>\r\n\t\t</section>\r\n\t</div>\r\n}\r\n"
        },
        {
            "name": "MoviesComponent",
            "id": "component-MoviesComponent-4bf1a7a5e4dfb5bdcb8d4c332c7643bd23ff42c84ba7c7ff1d94a4b77dcde9bcfcf4a0fa63e9690aa2133e0318067dc93cd6e2c49ef88c18fee8aceed0742c9c",
            "file": "src/app/features/main/movies/movies.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-movies",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./movies.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cf-movies',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './movies.component.html',\r\n  styleUrl: './movies.component.scss'\r\n})\r\nexport class MoviesComponent {\r\n\r\n}\r\n",
            "styleUrl": "./movies.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>movies works!</p>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-7e7ebb7ffdc50c554098ed7f2b4359e7573f5909c1b6827df50d0dad8c276986c3779f7c888f6802ced11b7385ba15de1992bbf078cddb9215dc488cefe3b4c9",
            "file": "src/app/shared/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n\t\tsearch: new FormControl('')\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "FormFieldComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms'\r\nimport { FormFieldComponent } from '../form-field/form-field.component'\r\nimport { LogoComponent } from '../logo/logo.component'\r\n\r\n@Component({\r\n\tselector: 'cf-navbar',\r\n\tstandalone: true,\r\n\timports: [ReactiveFormsModule, LogoComponent, FormFieldComponent],\r\n\ttemplateUrl: './navbar.component.html',\r\n\tstyleUrl: './navbar.component.scss'\r\n})\r\nexport class NavbarComponent {\r\n\tform = new FormGroup({\r\n\t\tsearch: new FormControl('')\r\n\t})\r\n\r\n\tonSubmit() {\r\n\t\tconsole.log(this.form.value)\r\n\t}\r\n}\r\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header>\r\n\t<cf-logo />\r\n\t<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\t\t<cf-form-field\r\n\t\t\t[nativeId]=\"'search'\"\r\n\t\t\t[type]=\"'text'\"\r\n\t\t\t[placeholder]=\"'Search movies...'\"\r\n\t\t\t[iconLeading]=\"'magnifying-glass'\"\r\n\t\t\t[showCleaner]=\"true\"\r\n\t\t\t[formControlName]=\"'search'\" />\r\n\t\t<button type=\"submit\"></button>\r\n\t</form>\r\n</header>\r\n"
        },
        {
            "name": "NavigationItemComponent",
            "id": "component-NavigationItemComponent-9e784bde4da3f336aa0ef0ac0f80698708daae34b3bb59850ee09235ba80260387b31bd351927e3c23a50f13bbdb4ae82280a3774aed3e1270ce5345a26bc74d",
            "file": "src/app/shared/components/navigation-item/navigation-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cf-navigation-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "required": false
                },
                {
                    "name": "icon",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isButton",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "required": false
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": true
                },
                {
                    "name": "route",
                    "defaultValue": "input('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "onButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "TuiLoader"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, Component, input, model, output } from '@angular/core'\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\r\nimport { CommonModule } from '@angular/common'\r\nimport { RouterLink, RouterLinkActive } from '@angular/router'\r\n// import { TuiActionModule } from '@taiga-ui/kit'\r\nimport { TuiLoader } from '@taiga-ui/core'\r\nimport { CoreService } from '@services'\r\nimport { IconComponent } from '../icon/icon.component'\r\n\r\n@Component({\r\n\tselector: 'cf-navigation-item',\r\n\tstandalone: true,\r\n\timports: [CommonModule, RouterLink, RouterLinkActive, TuiLoader, IconComponent],\r\n\ttemplateUrl: './navigation-item.component.html',\r\n\tstyleUrl: './navigation-item.component.scss'\r\n})\r\nexport class NavigationItemComponent {\r\n\tlabel = input.required<string>()\r\n\ticon = input('')\r\n\troute = input('')\r\n\tisButton = input(false, { transform: booleanAttribute })\r\n\tisLoading = model(false)\r\n\r\n\tbuttonClick = output()\r\n\r\n\tconstructor(private coreService: CoreService) {\r\n\t\tthis.coreService\r\n\t\t\t.getIsNavigationItemLoading()\r\n\t\t\t.pipe(takeUntilDestroyed())\r\n\t\t\t.subscribe(_isLoading => this.isLoading.set(_isLoading))\r\n\t}\r\n\r\n\tonButtonClick() {\r\n\t\tthis.buttonClick.emit()\r\n\t}\r\n}\r\n",
            "styleUrl": "./navigation-item.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (isButton()) {\r\n\t<tui-loader [overlay]=\"true\" [showLoader]=\"isLoading()\">\r\n\t\t<button tuiAction type=\"button\" (click)=\"onButtonClick()\" [ngClass]=\"{ 'is-loading': isLoading() }\">\r\n\t\t\t@if (!isLoading()) {\r\n\t\t\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n\t\t\t}\r\n\t\t</button>\r\n\t</tui-loader>\r\n} @else {\r\n\t<a tuiAction [routerLink]=\"route()\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">\r\n\t\t<ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n\t</a>\r\n}\r\n\r\n<ng-template #content>\r\n\t<cf-icon [icon]=\"icon()\" [classes]=\"'fs-medium'\" />\r\n\t<span>{{ label() }}</span>\r\n</ng-template>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-32909020437b8d9bc98e21ebac56be71bbe301054d871bc0e69234588865c69cce51246f82ef6b76481b1ab46c5d649bd49115c73a681c7e26d92902632f2194",
            "file": "src/app/shared/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "tuiNumberFormatProvider({\n    decimalSeparator: , thousandSeparator: \n})"
                }
            ],
            "selector": "cf-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "navigation$",
                    "defaultValue": "this.coreService.getNavigation()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user$",
                    "defaultValue": "this.userService.getUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiLineClamp"
                },
                {
                    "name": "TuiSkeleton"
                },
                {
                    "name": "NavigationItemComponent",
                    "type": "component"
                },
                {
                    "name": "IconComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\r\nimport { AsyncPipe } from '@angular/common'\r\nimport { Router } from '@angular/router'\r\nimport { tuiNumberFormatProvider } from '@taiga-ui/core'\r\nimport { TuiLineClamp, TuiSkeleton } from '@taiga-ui/kit'\r\nimport { catchError, EMPTY, first, map, timer } from 'rxjs'\r\nimport { AuthService, CoreService, UserService } from '@services'\r\nimport { ButtonComponent } from '../button/button.component'\r\nimport { IconComponent } from '../icon/icon.component'\r\nimport { NavigationItemComponent } from '../navigation-item/navigation-item.component'\r\n\r\n@Component({\r\n\tselector: 'cf-sidebar',\r\n\tstandalone: true,\r\n\timports: [AsyncPipe, TuiLineClamp, TuiSkeleton, NavigationItemComponent, IconComponent, ButtonComponent],\r\n\tproviders: [\r\n\t\ttuiNumberFormatProvider({\r\n\t\t\tdecimalSeparator: '.',\r\n\t\t\tthousandSeparator: ' '\r\n\t\t})\r\n\t],\r\n\ttemplateUrl: './sidebar.component.html',\r\n\tstyleUrl: './sidebar.component.scss'\r\n})\r\nexport class SidebarComponent {\r\n\tnavigation$ = this.coreService.getNavigation()\r\n\tuser$ = this.userService.getUser()\r\n\r\n\tconstructor(\r\n\t\tprivate coreService: CoreService,\r\n\t\tprivate userService: UserService,\r\n\t\tprivate authService: AuthService,\r\n\t\tprivate router: Router\r\n\t) {}\r\n\r\n\tsignOut() {\r\n\t\tthis.coreService.setIsNavigationItemLoading(true)\r\n\r\n\t\ttimer(1000)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap(() => this.authService.signOut()),\r\n\t\t\t\tfirst(),\r\n\t\t\t\tcatchError(() => {\r\n\t\t\t\t\tthis.coreService.setIsNavigationItemLoading(false)\r\n\t\t\t\t\treturn EMPTY\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: () => this.router.navigate(['/sign-up']),\r\n\t\t\t\terror: () => this.coreService.setIsNavigationItemLoading(false),\r\n\t\t\t\tcomplete: () => this.coreService.setIsNavigationItemLoading(false)\r\n\t\t\t})\r\n\t}\r\n}\r\n",
            "styleUrl": "./sidebar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<nav>\r\n\t@if (user$ | async; as user) {\r\n\t\t<section>\r\n\t\t\t<article id=\"info\">\r\n\t\t\t\t<cf-icon [icon]=\"'user'\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<tui-line-clamp [content]=\"user.name\" [lineHeight]=\"16\" [linesLimit]=\"1\" />\r\n\t\t\t\t\t<tui-line-clamp [content]=\"user.email\" [lineHeight]=\"12\" [linesLimit]=\"1\" />\r\n\t\t\t\t</div>\r\n\t\t\t</article>\r\n\t\t\t<article id=\"balance\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Balance</p>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<cf-icon [icon]=\"'money'\" />\r\n\t\t\t\t\t\t<!-- <tui-money [currency]=\"'USD'\" [currencyAlign]=\"'left'\" [value]=\"user.balance\" /> -->\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<cf-button [type]=\"'button'\" [label]=\"'A button'\" [iconLeading]=\"'pencil-simple'\" [isIconButton]=\"true\" />\r\n\t\t\t</article>\r\n\t\t</section>\r\n\t}\r\n\t<menu>\r\n\t\t@for (item of navigation$ | async; track item.id) {\r\n\t\t\t<li>\r\n\t\t\t\t<cf-navigation-item [label]=\"item.label\" [icon]=\"item.icon\" [route]=\"item.route\" />\r\n\t\t\t</li>\r\n\t\t}\r\n\t</menu>\r\n\t<footer>\r\n\t\t<cf-navigation-item [label]=\"'Sign out'\" [icon]=\"'sign-out'\" [isButton]=\"true\" (buttonClick)=\"signOut()\" />\r\n\t</footer>\r\n</nav>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-46a1c2f12f151469f3da2fa20fddb33516baa08d5dac3e9cb441c2f1098d8605619b309813ab179d24f71780ef960621bf3d0b3102f05e8e50b20eaa302e9b80",
            "file": "src/app/features/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: TUI_VALIDATION_ERRORS, useValue: {\n        required: ({ message }: {\n            message: string;\n        }) => message, minlength: ({ message }: {\n            message: string;\n        }) => message, email: \n    }\n}"
                }
            ],
            "selector": "cf-sign-up",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carousel$",
                    "defaultValue": "this.movieService.getMoviesCarousel(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n\t\tname: new FormControl<string | null>(null, [\r\n\t\t\tcustomMinLengthValidator('Full name'),\r\n\t\t\tcustomRequiredValidator('Full name')\r\n\t\t]),\r\n\t\temail: new FormControl<string | null>(null, [Validators.email, customRequiredValidator('E-mail')]),\r\n\t\tbalance: new FormControl<number | null>(null, customRequiredValidator('Balance')),\r\n\t\tticket: new FormControl<number | null>(null, customRequiredValidator('Ticket'))\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "formFields",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\tformControlName: 'name',\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'Full name',\r\n\t\t\tplaceholder: 'Jane Doe',\r\n\t\t\ticon: 'user',\r\n\t\t\tisRequired: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'email',\r\n\t\t\tformControlName: 'email',\r\n\t\t\ttype: 'email',\r\n\t\t\tlabel: 'E-mail',\r\n\t\t\tplaceholder: 'janedoe@example.com',\r\n\t\t\ticon: 'envelope-simple',\r\n\t\t\tisRequired: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'balance',\r\n\t\t\tformControlName: 'balance',\r\n\t\t\ttype: 'number',\r\n\t\t\tlabel: 'Balance',\r\n\t\t\tplaceholder: '100',\r\n\t\t\ticon: 'money',\r\n\t\t\tisRequired: true,\r\n\t\t\thint: '💵 Your initial balance when you sign up',\r\n\t\t\tprefix: '$'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'ticket',\r\n\t\t\tformControlName: 'ticket',\r\n\t\t\ttype: 'number',\r\n\t\t\tlabel: 'Ticket price',\r\n\t\t\tplaceholder: '4.45',\r\n\t\t\ticon: 'ticket',\r\n\t\t\tisRequired: true,\r\n\t\t\thint: '💰 The base price for the tickets of movies you want to watch',\r\n\t\t\tprefix: '$'\r\n\t\t}\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isCarouselVisible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "methodsClass": [
                {
                    "name": "signUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleButtonAndFormFieldState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiSkeleton"
                },
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "FormFieldComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CarouselComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core'\r\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop'\r\nimport { AsyncPipe, NgClass } from '@angular/common'\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms'\r\nimport { Router } from '@angular/router'\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\r\nimport { TuiAlertService } from '@taiga-ui/core'\r\nimport { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit'\r\nimport { TuiSkeleton } from '@taiga-ui/kit'\r\nimport { catchError, delay, EMPTY, first, tap } from 'rxjs'\r\nimport { FormField, User } from '@models'\r\nimport { ButtonComponent, CarouselComponent, FormFieldComponent, LogoComponent } from '@components'\r\nimport { customMinLengthValidator, customRequiredValidator } from '@validators'\r\nimport { AuthService, CoreService, MovieService } from '@services'\r\n\r\n@Component({\r\n\tselector: 'cf-sign-up',\r\n\tstandalone: true,\r\n\timports: [\r\n\t\tAsyncPipe,\r\n\t\tNgClass,\r\n\t\tReactiveFormsModule,\r\n\t\tTuiSkeleton,\r\n\t\tLogoComponent,\r\n\t\tFormFieldComponent,\r\n\t\tButtonComponent,\r\n\t\tCarouselComponent\r\n\t],\r\n\tproviders: [\r\n\t\t{\r\n\t\t\tprovide: TUI_VALIDATION_ERRORS,\r\n\t\t\tuseValue: {\r\n\t\t\t\trequired: ({ message }: { message: string }) => message,\r\n\t\t\t\tminlength: ({ message }: { message: string }) => message,\r\n\t\t\t\temail: 'Enter a valid email'\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\ttemplateUrl: './sign-up.component.html',\r\n\tstyleUrl: './sign-up.component.scss'\r\n})\r\nexport class SignUpComponent {\r\n\tform = new FormGroup({\r\n\t\tname: new FormControl<string | null>(null, [\r\n\t\t\tcustomMinLengthValidator('Full name'),\r\n\t\t\tcustomRequiredValidator('Full name')\r\n\t\t]),\r\n\t\temail: new FormControl<string | null>(null, [Validators.email, customRequiredValidator('E-mail')]),\r\n\t\tbalance: new FormControl<number | null>(null, customRequiredValidator('Balance')),\r\n\t\tticket: new FormControl<number | null>(null, customRequiredValidator('Ticket'))\r\n\t})\r\n\r\n\tformFields: FormField[] = [\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\tformControlName: 'name',\r\n\t\t\ttype: 'text',\r\n\t\t\tlabel: 'Full name',\r\n\t\t\tplaceholder: 'Jane Doe',\r\n\t\t\ticon: 'user',\r\n\t\t\tisRequired: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'email',\r\n\t\t\tformControlName: 'email',\r\n\t\t\ttype: 'email',\r\n\t\t\tlabel: 'E-mail',\r\n\t\t\tplaceholder: 'janedoe@example.com',\r\n\t\t\ticon: 'envelope-simple',\r\n\t\t\tisRequired: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'balance',\r\n\t\t\tformControlName: 'balance',\r\n\t\t\ttype: 'number',\r\n\t\t\tlabel: 'Balance',\r\n\t\t\tplaceholder: '100',\r\n\t\t\ticon: 'money',\r\n\t\t\tisRequired: true,\r\n\t\t\thint: '💵 Your initial balance when you sign up',\r\n\t\t\tprefix: '$'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'ticket',\r\n\t\t\tformControlName: 'ticket',\r\n\t\t\ttype: 'number',\r\n\t\t\tlabel: 'Ticket price',\r\n\t\t\tplaceholder: '4.45',\r\n\t\t\ticon: 'ticket',\r\n\t\t\tisRequired: true,\r\n\t\t\thint: '💰 The base price for the tickets of movies you want to watch',\r\n\t\t\tprefix: '$'\r\n\t\t}\r\n\t]\r\n\r\n\tcarousel$ = this.movieService.getMoviesCarousel(true)\r\n\tisCarouselVisible = true\r\n\r\n\tconstructor(\r\n\t\tprivate movieService: MovieService,\r\n\t\tprivate coreService: CoreService,\r\n\t\tprivate authService: AuthService,\r\n\t\tprivate router: Router,\r\n\t\tprivate responsive: BreakpointObserver,\r\n\t\t@Inject(TuiAlertService) private readonly alerts: TuiAlertService\r\n\t) {\r\n\t\tthis.responsive\r\n\t\t\t.observe([Breakpoints.Tablet, Breakpoints.Handset])\r\n\t\t\t.pipe(takeUntilDestroyed())\r\n\t\t\t.subscribe(res => {\r\n\t\t\t\tif (res.matches) {\r\n\t\t\t\t\tthis.isCarouselVisible = false\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.isCarouselVisible = true\r\n\t\t\t})\r\n\t}\r\n\r\n\tsignUp() {\r\n\t\tif (this.form.invalid) {\r\n\t\t\tthis.form.markAllAsTouched()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.coreService.setIsButtonDisabled(true)\r\n\t\tthis.coreService.setIsButtonLoading(true)\r\n\t\tthis.coreService.setIsFormFieldDisabled(true)\r\n\r\n\t\tconst user: User = {\r\n\t\t\tid: '',\r\n\t\t\tname: this.form.get('name')?.value!,\r\n\t\t\temail: this.form.get('email')?.value!,\r\n\t\t\tbalance: this.form.get('balance')?.value!,\r\n\t\t\tticket: this.form.get('ticket')?.value!\r\n\t\t}\r\n\r\n\t\tthis.authService\r\n\t\t\t.signUp(user)\r\n\t\t\t.pipe(\r\n\t\t\t\tdelay(1200),\r\n\t\t\t\tfirst(),\r\n\t\t\t\tcatchError(() => {\r\n\t\t\t\t\tthis.toggleButtonAndFormFieldState(false)\r\n\t\t\t\t\treturn EMPTY\r\n\t\t\t\t}),\r\n\t\t\t\ttap(() => {\r\n\t\t\t\t\tthis.alerts\r\n\t\t\t\t\t\t.open('You have successfully signed up!', { label: 'Success', autoClose: 1000, appearance: 'success' })\r\n\t\t\t\t\t\t.pipe(first())\r\n\t\t\t\t\t\t.subscribe()\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe({\r\n\t\t\t\tnext: () => this.router.navigate(['/home']),\r\n\t\t\t\terror: () => {\r\n\t\t\t\t\tthis.toggleButtonAndFormFieldState(false)\r\n\t\t\t\t},\r\n\t\t\t\tcomplete: () => {\r\n\t\t\t\t\tthis.toggleButtonAndFormFieldState(false)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t}\r\n\r\n\ttoggleButtonAndFormFieldState(state: boolean) {\r\n\t\tthis.coreService.setIsButtonDisabled(state)\r\n\t\tthis.coreService.setIsButtonLoading(state)\r\n\t\tthis.coreService.setIsFormFieldDisabled(state)\r\n\t}\r\n}\r\n",
            "styleUrl": "./sign-up.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "responsive",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alerts",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "coreService",
                        "type": "CoreService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "responsive",
                        "type": "BreakpointObserver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alerts",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header id=\"header\">\r\n\t<cf-logo />\r\n</header>\r\n\r\n<main>\r\n\t<header>\r\n\t\t<h2>Create new account</h2>\r\n\t\t<h3>Start for free</h3>\r\n\t</header>\r\n\r\n\t<form [formGroup]=\"form\" id=\"form\" (ngSubmit)=\"signUp()\">\r\n\t\t@for (field of formFields; track field.id) {\r\n\t\t\t<cf-form-field\r\n\t\t\t\t[ngClass]=\"[field.id]\"\r\n\t\t\t\t[nativeId]=\"field.id\"\r\n\t\t\t\t[formControlName]=\"field.formControlName\"\r\n\t\t\t\t[type]=\"field.type\"\r\n\t\t\t\t[placeholder]=\"field.placeholder\"\r\n\t\t\t\t[iconLeading]=\"field.icon\"\r\n\t\t\t\t[label]=\"field.label\"\r\n\t\t\t\t[isRequired]=\"field.isRequired\"\r\n\t\t\t\t[hint]=\"field.hint\"\r\n\t\t\t\t[prefix]=\"field.prefix || ''\" />\r\n\t\t}\r\n\t</form>\r\n\r\n\t<footer>\r\n\t\t<cf-button [type]=\"'submit'\" [label]=\"'Create account'\" [form]=\"'form'\" />\r\n\t</footer>\r\n</main>\r\n\r\n@if (isCarouselVisible) {\r\n\t@defer {\r\n\t\t<cf-carousel\r\n\t\t\tid=\"carousel\"\r\n\t\t\t[items]=\"(carousel$ | async) || []\"\r\n\t\t\t[loaderParams]=\"{ width: 1310, fit: 'cover' }\"\r\n\t\t\t[addFade]=\"true\" />\r\n\t} @loading {\r\n\t\t<div class=\"carousel-skeleton\"></div>\r\n\t} @placeholder {\r\n\t\t<div class=\"carousel-skeleton\"></div>\r\n\t}\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "apiConfigurationResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/api-configuration/api-configuration.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<boolean | void>",
                "defaultValue": "(route, state) => {\r\n\tconst apiConfigurationService = inject(ApiConfigurationService)\r\n\r\n\tif (apiConfigurationService.isApiConfigurationLoaded()) return\r\n\treturn apiConfigurationService.getApiDetails()\r\n}"
            },
            {
                "name": "apiInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/config/api.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n\tconst apiToken = environment.apiToken\r\n\r\n\tconst authReq = req.clone({\r\n\t\theaders: req.headers.set('Authorization', `Bearer ${apiToken}`)\r\n\t})\r\n\r\n\treturn next(authReq)\r\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideAnimations(),\r\n\t\tprovideZoneChangeDetection({ eventCoalescing: true }),\r\n\t\tprovideRouter(routes, withViewTransitions(), withComponentInputBinding()),\r\n\t\tprovideHttpClient(withInterceptors([apiInterceptor])),\r\n        NG_EVENT_PLUGINS\r\n    ]\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanMatchFn",
                "defaultValue": "(route, segments) => {\r\n\tconst authService = inject(AuthService)\r\n\tconst router = inject(Router)\r\n\r\n\treturn authService.isAuthenticated().pipe(\r\n\t\ttap(isAuthenticated => {\r\n\t\t\tif (!isAuthenticated) {\r\n\t\t\t\trouter.navigate(['/sign-up'])\r\n\t\t\t}\r\n\t\t})\r\n\t)\r\n}"
            },
            {
                "name": "certificationsResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/certifications/certifications.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<boolean | void>",
                "defaultValue": "(route, state) => {\r\n\tconst certificationsService = inject(CertificationsService)\r\n\r\n\tif (certificationsService.areMovieCertificationsLoaded()) return\r\n\treturn certificationsService.loadMovieCertifications()\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    apiUrl: 'https://api.themoviedb.org/3',\n    apiKey: '18fe0009a33e2347f13b4fbacde6a2c1',\n\tapiToken: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxOGZlMDAwOWEzM2UyMzQ3ZjEzYjRmYmFjZGU2YTJjMSIsInN1YiI6IjY0ZDdlM2Y4ZjE0ZGFkMDEwMDRiZjVjOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4BKu9BDpAuthcURVLwkdKUuOU8_W6DG8Z7ZlKjeLpVI'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n\tapiUrl: 'https://api.themoviedb.org/3',\n\tapiKey: '18fe0009a33e2347f13b4fbacde6a2c1',\n\tapiToken: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxOGZlMDAwOWEzM2UyMzQ3ZjEzYjRmYmFjZGU2YTJjMSIsInN1YiI6IjY0ZDdlM2Y4ZjE0ZGFkMDEwMDRiZjVjOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4BKu9BDpAuthcURVLwkdKUuOU8_W6DG8Z7ZlKjeLpVI'\n}"
            },
            {
                "name": "movieResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/movie/movie.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<[] | void>",
                "defaultValue": "(route, state) => {\r\n\tconst movieService = inject(MovieService)\r\n\r\n\tif (movieService.areMoviesLoaded()) return\r\n\treturn movieService.loadMovies()\r\n}"
            },
            {
                "name": "NAVIGATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/data/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NavigationItem[]",
                "defaultValue": "[\r\n\t{ id: uuid(), label: 'Home', icon: 'house', route: '/home' },\r\n\t{ id: uuid(), label: 'Movies', icon: 'film-reel', route: '/movies' },\r\n\t{ id: uuid(), label: 'Favorites', icon: 'heart', route: '/favorites' },\r\n\t{ id: uuid(), label: 'Food and Drinks', icon: 'popcorn', route: '/food-drinks' }\r\n]"
            },
            {
                "name": "noAuthGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/no-auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanMatchFn",
                "defaultValue": "(route, segments) => {\r\n\tconst authService = inject(AuthService)\r\n\tconst router = inject(Router)\r\n\r\n\treturn authService.isAuthenticated().pipe(\r\n\t\ttap(isAuthenticated => {\r\n\t\t\tif (isAuthenticated) {\r\n\t\t\t\trouter.navigate(['/home'])\r\n\t\t\t}\r\n\t\t}),\r\n\t\tmap(isAuthenticated => !isAuthenticated)\r\n\t)\r\n}"
            },
            {
                "name": "SOCIAL_MEDIA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/data/social-media.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SocialMedia[]",
                "defaultValue": "[\r\n\t{ id: uuid(), icon: 'github-logo', link: 'https://github.com/NathyVZM' },\r\n\t{ id: uuid(), icon: 'instagram-logo', link: 'https://www.instagram.com/nathievzm' },\r\n\t{ id: uuid(), icon: 'linkedin-logo', link: 'https://www.linkedin.com/in/nathalie-zambrano-571997230' },\r\n\t{ id: uuid(), icon: 'telegram-logo', link: 'https://t.me/white_desertfox' }\r\n]"
            },
            {
                "name": "TUI_ICON_REGISTRY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/config/icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "tuiCreateToken<Record<string, string>>({})"
            },
            {
                "name": "TUI_ICON_START_RESOLVER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/config/icon-resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "tuiCreateTokenFromFactory<TuiStringHandler<string>>(() => {\r\n\tconst path = inject(TUI_ASSETS_PATH)\r\n\treturn icon =>\r\n\t\ticon.includes('@tui') ? `${path}/${icon.replace('@tui.', '').split('.').join('/')}.svg` : `icons/${icon}-duotone.svg`\r\n})"
            },
            {
                "name": "TUI_ICON_STARTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/config/icons.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TUI_ICON_REGISTRY"
            },
            {
                "name": "userResolver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/user/user.resolver.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ResolveFn<void>",
                "defaultValue": "(route, state) => {\r\n\tconst userService = inject(UserService)\r\n\treturn userService.loadUser()\r\n}"
            }
        ],
        "functions": [
            {
                "name": "customMinLengthValidator",
                "file": "src/app/shared/validators/custom-min-length.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "customRequiredValidator",
                "file": "src/app/shared/validators/custom-required.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "field",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "field",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tuiIconResolverProvider",
                "file": "src/app/core/config/icon-resolver.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "useValue",
                        "type": "TuiStringHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider",
                "jsdoctags": [
                    {
                        "name": "useValue",
                        "type": "TuiStringHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tuiIconsProvider",
                "file": "src/app/core/config/icons.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "icons",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "FactoryProvider",
                "jsdoctags": [
                    {
                        "name": "icons",
                        "type": "Record",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tuiInjectIconResolver",
                "file": "src/app/core/config/icon-resolver.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "TuiStringHandler<string>"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/core/services/api-configuration/api-configuration.resolver.ts": [
                {
                    "name": "apiConfigurationResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/api-configuration/api-configuration.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<boolean | void>",
                    "defaultValue": "(route, state) => {\r\n\tconst apiConfigurationService = inject(ApiConfigurationService)\r\n\r\n\tif (apiConfigurationService.isApiConfigurationLoaded()) return\r\n\treturn apiConfigurationService.getApiDetails()\r\n}"
                }
            ],
            "src/app/core/config/api.interceptor.ts": [
                {
                    "name": "apiInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/config/api.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n\tconst apiToken = environment.apiToken\r\n\r\n\tconst authReq = req.clone({\r\n\t\theaders: req.headers.set('Authorization', `Bearer ${apiToken}`)\r\n\t})\r\n\r\n\treturn next(authReq)\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n\tproviders: [\r\n\t\tprovideAnimations(),\r\n\t\tprovideZoneChangeDetection({ eventCoalescing: true }),\r\n\t\tprovideRouter(routes, withViewTransitions(), withComponentInputBinding()),\r\n\t\tprovideHttpClient(withInterceptors([apiInterceptor])),\r\n        NG_EVENT_PLUGINS\r\n    ]\r\n}"
                }
            ],
            "src/app/core/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanMatchFn",
                    "defaultValue": "(route, segments) => {\r\n\tconst authService = inject(AuthService)\r\n\tconst router = inject(Router)\r\n\r\n\treturn authService.isAuthenticated().pipe(\r\n\t\ttap(isAuthenticated => {\r\n\t\t\tif (!isAuthenticated) {\r\n\t\t\t\trouter.navigate(['/sign-up'])\r\n\t\t\t}\r\n\t\t})\r\n\t)\r\n}"
                }
            ],
            "src/app/core/services/certifications/certifications.resolver.ts": [
                {
                    "name": "certificationsResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/certifications/certifications.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<boolean | void>",
                    "defaultValue": "(route, state) => {\r\n\tconst certificationsService = inject(CertificationsService)\r\n\r\n\tif (certificationsService.areMovieCertificationsLoaded()) return\r\n\treturn certificationsService.loadMovieCertifications()\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    apiUrl: 'https://api.themoviedb.org/3',\n    apiKey: '18fe0009a33e2347f13b4fbacde6a2c1',\n\tapiToken: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxOGZlMDAwOWEzM2UyMzQ3ZjEzYjRmYmFjZGU2YTJjMSIsInN1YiI6IjY0ZDdlM2Y4ZjE0ZGFkMDEwMDRiZjVjOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4BKu9BDpAuthcURVLwkdKUuOU8_W6DG8Z7ZlKjeLpVI'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n\tapiUrl: 'https://api.themoviedb.org/3',\n\tapiKey: '18fe0009a33e2347f13b4fbacde6a2c1',\n\tapiToken: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxOGZlMDAwOWEzM2UyMzQ3ZjEzYjRmYmFjZGU2YTJjMSIsInN1YiI6IjY0ZDdlM2Y4ZjE0ZGFkMDEwMDRiZjVjOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.4BKu9BDpAuthcURVLwkdKUuOU8_W6DG8Z7ZlKjeLpVI'\n}"
                }
            ],
            "src/app/core/services/movie/movie.resolver.ts": [
                {
                    "name": "movieResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/movie/movie.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<[] | void>",
                    "defaultValue": "(route, state) => {\r\n\tconst movieService = inject(MovieService)\r\n\r\n\tif (movieService.areMoviesLoaded()) return\r\n\treturn movieService.loadMovies()\r\n}"
                }
            ],
            "src/app/core/data/navigation.ts": [
                {
                    "name": "NAVIGATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/data/navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "defaultValue": "[\r\n\t{ id: uuid(), label: 'Home', icon: 'house', route: '/home' },\r\n\t{ id: uuid(), label: 'Movies', icon: 'film-reel', route: '/movies' },\r\n\t{ id: uuid(), label: 'Favorites', icon: 'heart', route: '/favorites' },\r\n\t{ id: uuid(), label: 'Food and Drinks', icon: 'popcorn', route: '/food-drinks' }\r\n]"
                }
            ],
            "src/app/core/guards/no-auth.guard.ts": [
                {
                    "name": "noAuthGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/no-auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanMatchFn",
                    "defaultValue": "(route, segments) => {\r\n\tconst authService = inject(AuthService)\r\n\tconst router = inject(Router)\r\n\r\n\treturn authService.isAuthenticated().pipe(\r\n\t\ttap(isAuthenticated => {\r\n\t\t\tif (isAuthenticated) {\r\n\t\t\t\trouter.navigate(['/home'])\r\n\t\t\t}\r\n\t\t}),\r\n\t\tmap(isAuthenticated => !isAuthenticated)\r\n\t)\r\n}"
                }
            ],
            "src/app/core/data/social-media.ts": [
                {
                    "name": "SOCIAL_MEDIA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/data/social-media.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SocialMedia[]",
                    "defaultValue": "[\r\n\t{ id: uuid(), icon: 'github-logo', link: 'https://github.com/NathyVZM' },\r\n\t{ id: uuid(), icon: 'instagram-logo', link: 'https://www.instagram.com/nathievzm' },\r\n\t{ id: uuid(), icon: 'linkedin-logo', link: 'https://www.linkedin.com/in/nathalie-zambrano-571997230' },\r\n\t{ id: uuid(), icon: 'telegram-logo', link: 'https://t.me/white_desertfox' }\r\n]"
                }
            ],
            "src/app/core/config/icons.ts": [
                {
                    "name": "TUI_ICON_REGISTRY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/config/icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "tuiCreateToken<Record<string, string>>({})"
                },
                {
                    "name": "TUI_ICON_STARTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/config/icons.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TUI_ICON_REGISTRY"
                }
            ],
            "src/app/core/config/icon-resolver.ts": [
                {
                    "name": "TUI_ICON_START_RESOLVER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/config/icon-resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "tuiCreateTokenFromFactory<TuiStringHandler<string>>(() => {\r\n\tconst path = inject(TUI_ASSETS_PATH)\r\n\treturn icon =>\r\n\t\ticon.includes('@tui') ? `${path}/${icon.replace('@tui.', '').split('.').join('/')}.svg` : `icons/${icon}-duotone.svg`\r\n})"
                }
            ],
            "src/app/core/services/user/user.resolver.ts": [
                {
                    "name": "userResolver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/user/user.resolver.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResolveFn<void>",
                    "defaultValue": "(route, state) => {\r\n\tconst userService = inject(UserService)\r\n\treturn userService.loadUser()\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/validators/custom-min-length.validator.ts": [
                {
                    "name": "customMinLengthValidator",
                    "file": "src/app/shared/validators/custom-min-length.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/validators/custom-required.validator.ts": [
                {
                    "name": "customRequiredValidator",
                    "file": "src/app/shared/validators/custom-required.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/config/icon-resolver.ts": [
                {
                    "name": "tuiIconResolverProvider",
                    "file": "src/app/core/config/icon-resolver.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "useValue",
                            "type": "TuiStringHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider",
                    "jsdoctags": [
                        {
                            "name": "useValue",
                            "type": "TuiStringHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tuiInjectIconResolver",
                    "file": "src/app/core/config/icon-resolver.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "TuiStringHandler<string>"
                }
            ],
            "src/app/core/config/icons.ts": [
                {
                    "name": "tuiIconsProvider",
                    "file": "src/app/core/config/icons.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "icons",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "FactoryProvider",
                    "jsdoctags": [
                        {
                            "name": "icons",
                            "type": "Record",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/api.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icon-resolver.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "tuiIconResolverProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icon-resolver.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "tuiInjectIconResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icon-resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TUI_ICON_START_RESOLVER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icons.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "tuiIconsProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TUI_ICON_REGISTRY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/config/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TUI_ICON_STARTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/social-media.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOCIAL_MEDIA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/no-auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/carousel-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarouselItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/form-field.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormField",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/loader-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoaderParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Classification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Movie",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/navigation-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/social-media.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SocialMedia",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/certification.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CertificationSchema",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/configuration.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigurationSchema",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/configuration.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Images",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BelongsToCollection",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Genre",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Images",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MovieSchema",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductionCompany",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductionCountry",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReleaseDate",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReleaseDates",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Result",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/schemas/movie-schema.schema.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpokenLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/api-configuration/api-configuration.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiConfigurationResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/api-configuration/api-configuration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfigurationService",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/certifications/certifications.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "certificationsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/certifications/certifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CertificationsService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/core/core.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreService",
                "coveragePercent": 66,
                "coverageCount": "10/15",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/movie/movie.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "movieResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/movie/movie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovieService",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/user/user.resolver.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/user/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/features/main/favorites/favorites.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FavoritesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/main/food-drinks/food-drinks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FoodDrinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/main/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/main/movies/movies.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MoviesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselComponent",
                "coveragePercent": 16,
                "coverageCount": "4/25",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/movie/movie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navigation-item/navigation-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/classification.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ClassificationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/genre.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GenrePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/runtime.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RuntimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/custom-min-length.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "customMinLengthValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/custom-required.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "customRequiredValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}